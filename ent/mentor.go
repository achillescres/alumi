// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itamconnect/ent/mentor"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Mentor is the model entity for the Mentor schema.
type Mentor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SearchFor holds the value of the "search_for" field.
	SearchFor string `json:"search_for,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MentorQuery when eager-loading is set.
	Edges        MentorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MentorEdges holds the relations/edges for other nodes in the graph.
type MentorEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Mentis holds the value of the mentis edge.
	Mentis []*Menti `json:"mentis,omitempty"`
	// Matches holds the value of the matches edge.
	Matches []*Match `json:"matches,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e MentorEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MentisOrErr returns the Mentis value or an error if the edge
// was not loaded in eager-loading.
func (e MentorEdges) MentisOrErr() ([]*Menti, error) {
	if e.loadedTypes[1] {
		return e.Mentis, nil
	}
	return nil, &NotLoadedError{edge: "mentis"}
}

// MatchesOrErr returns the Matches value or an error if the edge
// was not loaded in eager-loading.
func (e MentorEdges) MatchesOrErr() ([]*Match, error) {
	if e.loadedTypes[2] {
		return e.Matches, nil
	}
	return nil, &NotLoadedError{edge: "matches"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mentor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mentor.FieldID:
			values[i] = new(sql.NullInt64)
		case mentor.FieldSearchFor:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mentor fields.
func (m *Mentor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mentor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case mentor.FieldSearchFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field search_for", values[i])
			} else if value.Valid {
				m.SearchFor = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mentor.
// This includes values selected through modifiers, order, etc.
func (m *Mentor) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Mentor entity.
func (m *Mentor) QueryUser() *UserQuery {
	return NewMentorClient(m.config).QueryUser(m)
}

// QueryMentis queries the "mentis" edge of the Mentor entity.
func (m *Mentor) QueryMentis() *MentiQuery {
	return NewMentorClient(m.config).QueryMentis(m)
}

// QueryMatches queries the "matches" edge of the Mentor entity.
func (m *Mentor) QueryMatches() *MatchQuery {
	return NewMentorClient(m.config).QueryMatches(m)
}

// Update returns a builder for updating this Mentor.
// Note that you need to call Mentor.Unwrap() before calling this method if this Mentor
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mentor) Update() *MentorUpdateOne {
	return NewMentorClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mentor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mentor) Unwrap() *Mentor {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mentor is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mentor) String() string {
	var builder strings.Builder
	builder.WriteString("Mentor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("search_for=")
	builder.WriteString(m.SearchFor)
	builder.WriteByte(')')
	return builder.String()
}

// Mentors is a parsable slice of Mentor.
type Mentors []*Mentor
