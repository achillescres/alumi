// Code generated by ent, DO NOT EDIT.

package match

import (
	"fmt"
	"itamconnect/internal/domain/valueobject"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the match type in the database.
	Label = "match"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldMentorID holds the string denoting the mentor_id field in the database.
	FieldMentorID = "mentor_id"
	// FieldMentiID holds the string denoting the menti_id field in the database.
	FieldMentiID = "menti_id"
	// EdgeMentor holds the string denoting the mentor edge name in mutations.
	EdgeMentor = "mentor"
	// EdgeMenti holds the string denoting the menti edge name in mutations.
	EdgeMenti = "menti"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the match in the database.
	Table = "matches"
	// MentorTable is the table that holds the mentor relation/edge.
	MentorTable = "matches"
	// MentorInverseTable is the table name for the Mentor entity.
	// It exists in this package in order to avoid circular dependency with the "mentor" package.
	MentorInverseTable = "mentors"
	// MentorColumn is the table column denoting the mentor relation/edge.
	MentorColumn = "mentor_id"
	// MentiTable is the table that holds the menti relation/edge.
	MentiTable = "matches"
	// MentiInverseTable is the table name for the Menti entity.
	// It exists in this package in order to avoid circular dependency with the "menti" package.
	MentiInverseTable = "mentis"
	// MentiColumn is the table column denoting the menti relation/edge.
	MentiColumn = "menti_id"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "message_match"
)

// Columns holds all SQL columns for match fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCreatedAt,
	FieldMentorID,
	FieldMentiID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s valueobject.MatchStatus) error {
	switch s {
	case "pending", "accepted", "declined":
		return nil
	default:
		return fmt.Errorf("match: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Match queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMentorID orders the results by the mentor_id field.
func ByMentorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMentorID, opts...).ToFunc()
}

// ByMentiID orders the results by the menti_id field.
func ByMentiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMentiID, opts...).ToFunc()
}

// ByMentorField orders the results by mentor field.
func ByMentorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMentorStep(), sql.OrderByField(field, opts...))
	}
}

// ByMentiField orders the results by menti field.
func ByMentiField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMentiStep(), sql.OrderByField(field, opts...))
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMentorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MentorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MentorTable, MentorColumn),
	)
}
func newMentiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MentiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MentiTable, MentiColumn),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MessagesTable, MessagesColumn),
	)
}
