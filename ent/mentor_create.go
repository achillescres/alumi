// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/match"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MentorCreate is the builder for creating a Mentor entity.
type MentorCreate struct {
	config
	mutation *MentorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSearchFor sets the "search_for" field.
func (mc *MentorCreate) SetSearchFor(s string) *MentorCreate {
	mc.mutation.SetSearchFor(s)
	return mc
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (mc *MentorCreate) AddUserIDs(ids ...int) *MentorCreate {
	mc.mutation.AddUserIDs(ids...)
	return mc
}

// AddUser adds the "user" edges to the User entity.
func (mc *MentorCreate) AddUser(u ...*User) *MentorCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mc.AddUserIDs(ids...)
}

// AddMentiIDs adds the "mentis" edge to the Menti entity by IDs.
func (mc *MentorCreate) AddMentiIDs(ids ...int) *MentorCreate {
	mc.mutation.AddMentiIDs(ids...)
	return mc
}

// AddMentis adds the "mentis" edges to the Menti entity.
func (mc *MentorCreate) AddMentis(m ...*Menti) *MentorCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMentiIDs(ids...)
}

// AddMatchIDs adds the "matches" edge to the Match entity by IDs.
func (mc *MentorCreate) AddMatchIDs(ids ...int) *MentorCreate {
	mc.mutation.AddMatchIDs(ids...)
	return mc
}

// AddMatches adds the "matches" edges to the Match entity.
func (mc *MentorCreate) AddMatches(m ...*Match) *MentorCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMatchIDs(ids...)
}

// Mutation returns the MentorMutation object of the builder.
func (mc *MentorCreate) Mutation() *MentorMutation {
	return mc.mutation
}

// Save creates the Mentor in the database.
func (mc *MentorCreate) Save(ctx context.Context) (*Mentor, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MentorCreate) SaveX(ctx context.Context) *Mentor {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MentorCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MentorCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MentorCreate) check() error {
	if _, ok := mc.mutation.SearchFor(); !ok {
		return &ValidationError{Name: "search_for", err: errors.New(`ent: missing required field "Mentor.search_for"`)}
	}
	if len(mc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Mentor.user"`)}
	}
	return nil
}

func (mc *MentorCreate) sqlSave(ctx context.Context) (*Mentor, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MentorCreate) createSpec() (*Mentor, *sqlgraph.CreateSpec) {
	var (
		_node = &Mentor{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mentor.Table, sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt))
	)
	_spec.Schema = mc.schemaConfig.Mentor
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.SearchFor(); ok {
		_spec.SetField(mentor.FieldSearchFor, field.TypeString, value)
		_node.SearchFor = value
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mentor.UserTable,
			Columns: []string{mentor.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MentisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mentor.MentisTable,
			Columns: mentor.MentisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mc.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MatchCreate{config: mc.config, mutation: newMatchMutation(mc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   mentor.MatchesTable,
			Columns: []string{mentor.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mc.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mentor.Create().
//		SetSearchFor(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MentorUpsert) {
//			SetSearchFor(v+v).
//		}).
//		Exec(ctx)
func (mc *MentorCreate) OnConflict(opts ...sql.ConflictOption) *MentorUpsertOne {
	mc.conflict = opts
	return &MentorUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mentor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MentorCreate) OnConflictColumns(columns ...string) *MentorUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MentorUpsertOne{
		create: mc,
	}
}

type (
	// MentorUpsertOne is the builder for "upsert"-ing
	//  one Mentor node.
	MentorUpsertOne struct {
		create *MentorCreate
	}

	// MentorUpsert is the "OnConflict" setter.
	MentorUpsert struct {
		*sql.UpdateSet
	}
)

// SetSearchFor sets the "search_for" field.
func (u *MentorUpsert) SetSearchFor(v string) *MentorUpsert {
	u.Set(mentor.FieldSearchFor, v)
	return u
}

// UpdateSearchFor sets the "search_for" field to the value that was provided on create.
func (u *MentorUpsert) UpdateSearchFor() *MentorUpsert {
	u.SetExcluded(mentor.FieldSearchFor)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Mentor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MentorUpsertOne) UpdateNewValues() *MentorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mentor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MentorUpsertOne) Ignore() *MentorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MentorUpsertOne) DoNothing() *MentorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MentorCreate.OnConflict
// documentation for more info.
func (u *MentorUpsertOne) Update(set func(*MentorUpsert)) *MentorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MentorUpsert{UpdateSet: update})
	}))
	return u
}

// SetSearchFor sets the "search_for" field.
func (u *MentorUpsertOne) SetSearchFor(v string) *MentorUpsertOne {
	return u.Update(func(s *MentorUpsert) {
		s.SetSearchFor(v)
	})
}

// UpdateSearchFor sets the "search_for" field to the value that was provided on create.
func (u *MentorUpsertOne) UpdateSearchFor() *MentorUpsertOne {
	return u.Update(func(s *MentorUpsert) {
		s.UpdateSearchFor()
	})
}

// Exec executes the query.
func (u *MentorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MentorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MentorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MentorUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MentorUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MentorCreateBulk is the builder for creating many Mentor entities in bulk.
type MentorCreateBulk struct {
	config
	err      error
	builders []*MentorCreate
	conflict []sql.ConflictOption
}

// Save creates the Mentor entities in the database.
func (mcb *MentorCreateBulk) Save(ctx context.Context) ([]*Mentor, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mentor, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MentorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MentorCreateBulk) SaveX(ctx context.Context) []*Mentor {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MentorCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MentorCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mentor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MentorUpsert) {
//			SetSearchFor(v+v).
//		}).
//		Exec(ctx)
func (mcb *MentorCreateBulk) OnConflict(opts ...sql.ConflictOption) *MentorUpsertBulk {
	mcb.conflict = opts
	return &MentorUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mentor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MentorCreateBulk) OnConflictColumns(columns ...string) *MentorUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MentorUpsertBulk{
		create: mcb,
	}
}

// MentorUpsertBulk is the builder for "upsert"-ing
// a bulk of Mentor nodes.
type MentorUpsertBulk struct {
	create *MentorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mentor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MentorUpsertBulk) UpdateNewValues() *MentorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mentor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MentorUpsertBulk) Ignore() *MentorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MentorUpsertBulk) DoNothing() *MentorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MentorCreateBulk.OnConflict
// documentation for more info.
func (u *MentorUpsertBulk) Update(set func(*MentorUpsert)) *MentorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MentorUpsert{UpdateSet: update})
	}))
	return u
}

// SetSearchFor sets the "search_for" field.
func (u *MentorUpsertBulk) SetSearchFor(v string) *MentorUpsertBulk {
	return u.Update(func(s *MentorUpsert) {
		s.SetSearchFor(v)
	})
}

// UpdateSearchFor sets the "search_for" field to the value that was provided on create.
func (u *MentorUpsertBulk) UpdateSearchFor() *MentorUpsertBulk {
	return u.Update(func(s *MentorUpsert) {
		s.UpdateSearchFor()
	})
}

// Exec executes the query.
func (u *MentorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MentorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MentorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MentorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
