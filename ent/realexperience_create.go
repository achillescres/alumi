// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/realexperience"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RealExperienceCreate is the builder for creating a RealExperience entity.
type RealExperienceCreate struct {
	config
	mutation *RealExperienceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWhere sets the "where" field.
func (rec *RealExperienceCreate) SetWhere(s string) *RealExperienceCreate {
	rec.mutation.SetWhere(s)
	return rec
}

// SetAs sets the "as" field.
func (rec *RealExperienceCreate) SetAs(s string) *RealExperienceCreate {
	rec.mutation.SetAs(s)
	return rec
}

// SetHow sets the "how" field.
func (rec *RealExperienceCreate) SetHow(s string) *RealExperienceCreate {
	rec.mutation.SetHow(s)
	return rec
}

// SetDescription sets the "description" field.
func (rec *RealExperienceCreate) SetDescription(s string) *RealExperienceCreate {
	rec.mutation.SetDescription(s)
	return rec
}

// SetWhenStarted sets the "when_started" field.
func (rec *RealExperienceCreate) SetWhenStarted(t time.Time) *RealExperienceCreate {
	rec.mutation.SetWhenStarted(t)
	return rec
}

// SetNillableWhenStarted sets the "when_started" field if the given value is not nil.
func (rec *RealExperienceCreate) SetNillableWhenStarted(t *time.Time) *RealExperienceCreate {
	if t != nil {
		rec.SetWhenStarted(*t)
	}
	return rec
}

// SetWhenEnded sets the "when_ended" field.
func (rec *RealExperienceCreate) SetWhenEnded(t time.Time) *RealExperienceCreate {
	rec.mutation.SetWhenEnded(t)
	return rec
}

// SetNillableWhenEnded sets the "when_ended" field if the given value is not nil.
func (rec *RealExperienceCreate) SetNillableWhenEnded(t *time.Time) *RealExperienceCreate {
	if t != nil {
		rec.SetWhenEnded(*t)
	}
	return rec
}

// Mutation returns the RealExperienceMutation object of the builder.
func (rec *RealExperienceCreate) Mutation() *RealExperienceMutation {
	return rec.mutation
}

// Save creates the RealExperience in the database.
func (rec *RealExperienceCreate) Save(ctx context.Context) (*RealExperience, error) {
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RealExperienceCreate) SaveX(ctx context.Context) *RealExperience {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *RealExperienceCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *RealExperienceCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *RealExperienceCreate) check() error {
	if _, ok := rec.mutation.GetWhere(); !ok {
		return &ValidationError{Name: "where", err: errors.New(`ent: missing required field "RealExperience.where"`)}
	}
	if _, ok := rec.mutation.As(); !ok {
		return &ValidationError{Name: "as", err: errors.New(`ent: missing required field "RealExperience.as"`)}
	}
	if _, ok := rec.mutation.How(); !ok {
		return &ValidationError{Name: "how", err: errors.New(`ent: missing required field "RealExperience.how"`)}
	}
	if _, ok := rec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "RealExperience.description"`)}
	}
	return nil
}

func (rec *RealExperienceCreate) sqlSave(ctx context.Context) (*RealExperience, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *RealExperienceCreate) createSpec() (*RealExperience, *sqlgraph.CreateSpec) {
	var (
		_node = &RealExperience{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(realexperience.Table, sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt))
	)
	_spec.Schema = rec.schemaConfig.RealExperience
	_spec.OnConflict = rec.conflict
	if value, ok := rec.mutation.GetWhere(); ok {
		_spec.SetField(realexperience.FieldWhere, field.TypeString, value)
		_node.Where = value
	}
	if value, ok := rec.mutation.As(); ok {
		_spec.SetField(realexperience.FieldAs, field.TypeString, value)
		_node.As = value
	}
	if value, ok := rec.mutation.How(); ok {
		_spec.SetField(realexperience.FieldHow, field.TypeString, value)
		_node.How = value
	}
	if value, ok := rec.mutation.Description(); ok {
		_spec.SetField(realexperience.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rec.mutation.WhenStarted(); ok {
		_spec.SetField(realexperience.FieldWhenStarted, field.TypeTime, value)
		_node.WhenStarted = value
	}
	if value, ok := rec.mutation.WhenEnded(); ok {
		_spec.SetField(realexperience.FieldWhenEnded, field.TypeTime, value)
		_node.WhenEnded = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RealExperience.Create().
//		SetWhere(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RealExperienceUpsert) {
//			SetWhere(v+v).
//		}).
//		Exec(ctx)
func (rec *RealExperienceCreate) OnConflict(opts ...sql.ConflictOption) *RealExperienceUpsertOne {
	rec.conflict = opts
	return &RealExperienceUpsertOne{
		create: rec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RealExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rec *RealExperienceCreate) OnConflictColumns(columns ...string) *RealExperienceUpsertOne {
	rec.conflict = append(rec.conflict, sql.ConflictColumns(columns...))
	return &RealExperienceUpsertOne{
		create: rec,
	}
}

type (
	// RealExperienceUpsertOne is the builder for "upsert"-ing
	//  one RealExperience node.
	RealExperienceUpsertOne struct {
		create *RealExperienceCreate
	}

	// RealExperienceUpsert is the "OnConflict" setter.
	RealExperienceUpsert struct {
		*sql.UpdateSet
	}
)

// SetWhere sets the "where" field.
func (u *RealExperienceUpsert) SetWhere(v string) *RealExperienceUpsert {
	u.Set(realexperience.FieldWhere, v)
	return u
}

// UpdateWhere sets the "where" field to the value that was provided on create.
func (u *RealExperienceUpsert) UpdateWhere() *RealExperienceUpsert {
	u.SetExcluded(realexperience.FieldWhere)
	return u
}

// SetAs sets the "as" field.
func (u *RealExperienceUpsert) SetAs(v string) *RealExperienceUpsert {
	u.Set(realexperience.FieldAs, v)
	return u
}

// UpdateAs sets the "as" field to the value that was provided on create.
func (u *RealExperienceUpsert) UpdateAs() *RealExperienceUpsert {
	u.SetExcluded(realexperience.FieldAs)
	return u
}

// SetHow sets the "how" field.
func (u *RealExperienceUpsert) SetHow(v string) *RealExperienceUpsert {
	u.Set(realexperience.FieldHow, v)
	return u
}

// UpdateHow sets the "how" field to the value that was provided on create.
func (u *RealExperienceUpsert) UpdateHow() *RealExperienceUpsert {
	u.SetExcluded(realexperience.FieldHow)
	return u
}

// SetDescription sets the "description" field.
func (u *RealExperienceUpsert) SetDescription(v string) *RealExperienceUpsert {
	u.Set(realexperience.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RealExperienceUpsert) UpdateDescription() *RealExperienceUpsert {
	u.SetExcluded(realexperience.FieldDescription)
	return u
}

// SetWhenStarted sets the "when_started" field.
func (u *RealExperienceUpsert) SetWhenStarted(v time.Time) *RealExperienceUpsert {
	u.Set(realexperience.FieldWhenStarted, v)
	return u
}

// UpdateWhenStarted sets the "when_started" field to the value that was provided on create.
func (u *RealExperienceUpsert) UpdateWhenStarted() *RealExperienceUpsert {
	u.SetExcluded(realexperience.FieldWhenStarted)
	return u
}

// ClearWhenStarted clears the value of the "when_started" field.
func (u *RealExperienceUpsert) ClearWhenStarted() *RealExperienceUpsert {
	u.SetNull(realexperience.FieldWhenStarted)
	return u
}

// SetWhenEnded sets the "when_ended" field.
func (u *RealExperienceUpsert) SetWhenEnded(v time.Time) *RealExperienceUpsert {
	u.Set(realexperience.FieldWhenEnded, v)
	return u
}

// UpdateWhenEnded sets the "when_ended" field to the value that was provided on create.
func (u *RealExperienceUpsert) UpdateWhenEnded() *RealExperienceUpsert {
	u.SetExcluded(realexperience.FieldWhenEnded)
	return u
}

// ClearWhenEnded clears the value of the "when_ended" field.
func (u *RealExperienceUpsert) ClearWhenEnded() *RealExperienceUpsert {
	u.SetNull(realexperience.FieldWhenEnded)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RealExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RealExperienceUpsertOne) UpdateNewValues() *RealExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RealExperience.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RealExperienceUpsertOne) Ignore() *RealExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RealExperienceUpsertOne) DoNothing() *RealExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RealExperienceCreate.OnConflict
// documentation for more info.
func (u *RealExperienceUpsertOne) Update(set func(*RealExperienceUpsert)) *RealExperienceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RealExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetWhere sets the "where" field.
func (u *RealExperienceUpsertOne) SetWhere(v string) *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetWhere(v)
	})
}

// UpdateWhere sets the "where" field to the value that was provided on create.
func (u *RealExperienceUpsertOne) UpdateWhere() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateWhere()
	})
}

// SetAs sets the "as" field.
func (u *RealExperienceUpsertOne) SetAs(v string) *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetAs(v)
	})
}

// UpdateAs sets the "as" field to the value that was provided on create.
func (u *RealExperienceUpsertOne) UpdateAs() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateAs()
	})
}

// SetHow sets the "how" field.
func (u *RealExperienceUpsertOne) SetHow(v string) *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetHow(v)
	})
}

// UpdateHow sets the "how" field to the value that was provided on create.
func (u *RealExperienceUpsertOne) UpdateHow() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateHow()
	})
}

// SetDescription sets the "description" field.
func (u *RealExperienceUpsertOne) SetDescription(v string) *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RealExperienceUpsertOne) UpdateDescription() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateDescription()
	})
}

// SetWhenStarted sets the "when_started" field.
func (u *RealExperienceUpsertOne) SetWhenStarted(v time.Time) *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetWhenStarted(v)
	})
}

// UpdateWhenStarted sets the "when_started" field to the value that was provided on create.
func (u *RealExperienceUpsertOne) UpdateWhenStarted() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateWhenStarted()
	})
}

// ClearWhenStarted clears the value of the "when_started" field.
func (u *RealExperienceUpsertOne) ClearWhenStarted() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.ClearWhenStarted()
	})
}

// SetWhenEnded sets the "when_ended" field.
func (u *RealExperienceUpsertOne) SetWhenEnded(v time.Time) *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetWhenEnded(v)
	})
}

// UpdateWhenEnded sets the "when_ended" field to the value that was provided on create.
func (u *RealExperienceUpsertOne) UpdateWhenEnded() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateWhenEnded()
	})
}

// ClearWhenEnded clears the value of the "when_ended" field.
func (u *RealExperienceUpsertOne) ClearWhenEnded() *RealExperienceUpsertOne {
	return u.Update(func(s *RealExperienceUpsert) {
		s.ClearWhenEnded()
	})
}

// Exec executes the query.
func (u *RealExperienceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RealExperienceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RealExperienceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RealExperienceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RealExperienceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RealExperienceCreateBulk is the builder for creating many RealExperience entities in bulk.
type RealExperienceCreateBulk struct {
	config
	err      error
	builders []*RealExperienceCreate
	conflict []sql.ConflictOption
}

// Save creates the RealExperience entities in the database.
func (recb *RealExperienceCreateBulk) Save(ctx context.Context) ([]*RealExperience, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RealExperience, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RealExperienceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = recb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *RealExperienceCreateBulk) SaveX(ctx context.Context) []*RealExperience {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *RealExperienceCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *RealExperienceCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RealExperience.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RealExperienceUpsert) {
//			SetWhere(v+v).
//		}).
//		Exec(ctx)
func (recb *RealExperienceCreateBulk) OnConflict(opts ...sql.ConflictOption) *RealExperienceUpsertBulk {
	recb.conflict = opts
	return &RealExperienceUpsertBulk{
		create: recb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RealExperience.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (recb *RealExperienceCreateBulk) OnConflictColumns(columns ...string) *RealExperienceUpsertBulk {
	recb.conflict = append(recb.conflict, sql.ConflictColumns(columns...))
	return &RealExperienceUpsertBulk{
		create: recb,
	}
}

// RealExperienceUpsertBulk is the builder for "upsert"-ing
// a bulk of RealExperience nodes.
type RealExperienceUpsertBulk struct {
	create *RealExperienceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RealExperience.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RealExperienceUpsertBulk) UpdateNewValues() *RealExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RealExperience.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RealExperienceUpsertBulk) Ignore() *RealExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RealExperienceUpsertBulk) DoNothing() *RealExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RealExperienceCreateBulk.OnConflict
// documentation for more info.
func (u *RealExperienceUpsertBulk) Update(set func(*RealExperienceUpsert)) *RealExperienceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RealExperienceUpsert{UpdateSet: update})
	}))
	return u
}

// SetWhere sets the "where" field.
func (u *RealExperienceUpsertBulk) SetWhere(v string) *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetWhere(v)
	})
}

// UpdateWhere sets the "where" field to the value that was provided on create.
func (u *RealExperienceUpsertBulk) UpdateWhere() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateWhere()
	})
}

// SetAs sets the "as" field.
func (u *RealExperienceUpsertBulk) SetAs(v string) *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetAs(v)
	})
}

// UpdateAs sets the "as" field to the value that was provided on create.
func (u *RealExperienceUpsertBulk) UpdateAs() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateAs()
	})
}

// SetHow sets the "how" field.
func (u *RealExperienceUpsertBulk) SetHow(v string) *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetHow(v)
	})
}

// UpdateHow sets the "how" field to the value that was provided on create.
func (u *RealExperienceUpsertBulk) UpdateHow() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateHow()
	})
}

// SetDescription sets the "description" field.
func (u *RealExperienceUpsertBulk) SetDescription(v string) *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RealExperienceUpsertBulk) UpdateDescription() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateDescription()
	})
}

// SetWhenStarted sets the "when_started" field.
func (u *RealExperienceUpsertBulk) SetWhenStarted(v time.Time) *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetWhenStarted(v)
	})
}

// UpdateWhenStarted sets the "when_started" field to the value that was provided on create.
func (u *RealExperienceUpsertBulk) UpdateWhenStarted() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateWhenStarted()
	})
}

// ClearWhenStarted clears the value of the "when_started" field.
func (u *RealExperienceUpsertBulk) ClearWhenStarted() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.ClearWhenStarted()
	})
}

// SetWhenEnded sets the "when_ended" field.
func (u *RealExperienceUpsertBulk) SetWhenEnded(v time.Time) *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.SetWhenEnded(v)
	})
}

// UpdateWhenEnded sets the "when_ended" field to the value that was provided on create.
func (u *RealExperienceUpsertBulk) UpdateWhenEnded() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.UpdateWhenEnded()
	})
}

// ClearWhenEnded clears the value of the "when_ended" field.
func (u *RealExperienceUpsertBulk) ClearWhenEnded() *RealExperienceUpsertBulk {
	return u.Update(func(s *RealExperienceUpsert) {
		s.ClearWhenEnded()
	})
}

// Exec executes the query.
func (u *RealExperienceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RealExperienceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RealExperienceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RealExperienceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
