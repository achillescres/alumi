// Code generated by ent, DO NOT EDIT.

package realexperience

import (
	"itamconnect/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLTE(FieldID, id))
}

// Where applies equality check predicate on the "where" field. It's identical to WhereEQ.
func Where(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldWhere, v))
}

// As applies equality check predicate on the "as" field. It's identical to AsEQ.
func As(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldAs, v))
}

// How applies equality check predicate on the "how" field. It's identical to HowEQ.
func How(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldHow, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldDescription, v))
}

// WhenStarted applies equality check predicate on the "when_started" field. It's identical to WhenStartedEQ.
func WhenStarted(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldWhenStarted, v))
}

// WhenEnded applies equality check predicate on the "when_ended" field. It's identical to WhenEndedEQ.
func WhenEnded(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldWhenEnded, v))
}

// WhereEQ applies the EQ predicate on the "where" field.
func WhereEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldWhere, v))
}

// WhereNEQ applies the NEQ predicate on the "where" field.
func WhereNEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNEQ(FieldWhere, v))
}

// WhereIn applies the In predicate on the "where" field.
func WhereIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIn(FieldWhere, vs...))
}

// WhereNotIn applies the NotIn predicate on the "where" field.
func WhereNotIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotIn(FieldWhere, vs...))
}

// WhereGT applies the GT predicate on the "where" field.
func WhereGT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGT(FieldWhere, v))
}

// WhereGTE applies the GTE predicate on the "where" field.
func WhereGTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGTE(FieldWhere, v))
}

// WhereLT applies the LT predicate on the "where" field.
func WhereLT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLT(FieldWhere, v))
}

// WhereLTE applies the LTE predicate on the "where" field.
func WhereLTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLTE(FieldWhere, v))
}

// WhereContains applies the Contains predicate on the "where" field.
func WhereContains(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContains(FieldWhere, v))
}

// WhereHasPrefix applies the HasPrefix predicate on the "where" field.
func WhereHasPrefix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasPrefix(FieldWhere, v))
}

// WhereHasSuffix applies the HasSuffix predicate on the "where" field.
func WhereHasSuffix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasSuffix(FieldWhere, v))
}

// WhereEqualFold applies the EqualFold predicate on the "where" field.
func WhereEqualFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEqualFold(FieldWhere, v))
}

// WhereContainsFold applies the ContainsFold predicate on the "where" field.
func WhereContainsFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContainsFold(FieldWhere, v))
}

// AsEQ applies the EQ predicate on the "as" field.
func AsEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldAs, v))
}

// AsNEQ applies the NEQ predicate on the "as" field.
func AsNEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNEQ(FieldAs, v))
}

// AsIn applies the In predicate on the "as" field.
func AsIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIn(FieldAs, vs...))
}

// AsNotIn applies the NotIn predicate on the "as" field.
func AsNotIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotIn(FieldAs, vs...))
}

// AsGT applies the GT predicate on the "as" field.
func AsGT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGT(FieldAs, v))
}

// AsGTE applies the GTE predicate on the "as" field.
func AsGTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGTE(FieldAs, v))
}

// AsLT applies the LT predicate on the "as" field.
func AsLT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLT(FieldAs, v))
}

// AsLTE applies the LTE predicate on the "as" field.
func AsLTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLTE(FieldAs, v))
}

// AsContains applies the Contains predicate on the "as" field.
func AsContains(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContains(FieldAs, v))
}

// AsHasPrefix applies the HasPrefix predicate on the "as" field.
func AsHasPrefix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasPrefix(FieldAs, v))
}

// AsHasSuffix applies the HasSuffix predicate on the "as" field.
func AsHasSuffix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasSuffix(FieldAs, v))
}

// AsEqualFold applies the EqualFold predicate on the "as" field.
func AsEqualFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEqualFold(FieldAs, v))
}

// AsContainsFold applies the ContainsFold predicate on the "as" field.
func AsContainsFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContainsFold(FieldAs, v))
}

// HowEQ applies the EQ predicate on the "how" field.
func HowEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldHow, v))
}

// HowNEQ applies the NEQ predicate on the "how" field.
func HowNEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNEQ(FieldHow, v))
}

// HowIn applies the In predicate on the "how" field.
func HowIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIn(FieldHow, vs...))
}

// HowNotIn applies the NotIn predicate on the "how" field.
func HowNotIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotIn(FieldHow, vs...))
}

// HowGT applies the GT predicate on the "how" field.
func HowGT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGT(FieldHow, v))
}

// HowGTE applies the GTE predicate on the "how" field.
func HowGTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGTE(FieldHow, v))
}

// HowLT applies the LT predicate on the "how" field.
func HowLT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLT(FieldHow, v))
}

// HowLTE applies the LTE predicate on the "how" field.
func HowLTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLTE(FieldHow, v))
}

// HowContains applies the Contains predicate on the "how" field.
func HowContains(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContains(FieldHow, v))
}

// HowHasPrefix applies the HasPrefix predicate on the "how" field.
func HowHasPrefix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasPrefix(FieldHow, v))
}

// HowHasSuffix applies the HasSuffix predicate on the "how" field.
func HowHasSuffix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasSuffix(FieldHow, v))
}

// HowEqualFold applies the EqualFold predicate on the "how" field.
func HowEqualFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEqualFold(FieldHow, v))
}

// HowContainsFold applies the ContainsFold predicate on the "how" field.
func HowContainsFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContainsFold(FieldHow, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldContainsFold(FieldDescription, v))
}

// WhenStartedEQ applies the EQ predicate on the "when_started" field.
func WhenStartedEQ(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldWhenStarted, v))
}

// WhenStartedNEQ applies the NEQ predicate on the "when_started" field.
func WhenStartedNEQ(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNEQ(FieldWhenStarted, v))
}

// WhenStartedIn applies the In predicate on the "when_started" field.
func WhenStartedIn(vs ...time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIn(FieldWhenStarted, vs...))
}

// WhenStartedNotIn applies the NotIn predicate on the "when_started" field.
func WhenStartedNotIn(vs ...time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotIn(FieldWhenStarted, vs...))
}

// WhenStartedGT applies the GT predicate on the "when_started" field.
func WhenStartedGT(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGT(FieldWhenStarted, v))
}

// WhenStartedGTE applies the GTE predicate on the "when_started" field.
func WhenStartedGTE(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGTE(FieldWhenStarted, v))
}

// WhenStartedLT applies the LT predicate on the "when_started" field.
func WhenStartedLT(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLT(FieldWhenStarted, v))
}

// WhenStartedLTE applies the LTE predicate on the "when_started" field.
func WhenStartedLTE(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLTE(FieldWhenStarted, v))
}

// WhenStartedIsNil applies the IsNil predicate on the "when_started" field.
func WhenStartedIsNil() predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIsNull(FieldWhenStarted))
}

// WhenStartedNotNil applies the NotNil predicate on the "when_started" field.
func WhenStartedNotNil() predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotNull(FieldWhenStarted))
}

// WhenEndedEQ applies the EQ predicate on the "when_ended" field.
func WhenEndedEQ(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldEQ(FieldWhenEnded, v))
}

// WhenEndedNEQ applies the NEQ predicate on the "when_ended" field.
func WhenEndedNEQ(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNEQ(FieldWhenEnded, v))
}

// WhenEndedIn applies the In predicate on the "when_ended" field.
func WhenEndedIn(vs ...time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIn(FieldWhenEnded, vs...))
}

// WhenEndedNotIn applies the NotIn predicate on the "when_ended" field.
func WhenEndedNotIn(vs ...time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotIn(FieldWhenEnded, vs...))
}

// WhenEndedGT applies the GT predicate on the "when_ended" field.
func WhenEndedGT(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGT(FieldWhenEnded, v))
}

// WhenEndedGTE applies the GTE predicate on the "when_ended" field.
func WhenEndedGTE(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldGTE(FieldWhenEnded, v))
}

// WhenEndedLT applies the LT predicate on the "when_ended" field.
func WhenEndedLT(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLT(FieldWhenEnded, v))
}

// WhenEndedLTE applies the LTE predicate on the "when_ended" field.
func WhenEndedLTE(v time.Time) predicate.RealExperience {
	return predicate.RealExperience(sql.FieldLTE(FieldWhenEnded, v))
}

// WhenEndedIsNil applies the IsNil predicate on the "when_ended" field.
func WhenEndedIsNil() predicate.RealExperience {
	return predicate.RealExperience(sql.FieldIsNull(FieldWhenEnded))
}

// WhenEndedNotNil applies the NotNil predicate on the "when_ended" field.
func WhenEndedNotNil() predicate.RealExperience {
	return predicate.RealExperience(sql.FieldNotNull(FieldWhenEnded))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RealExperience) predicate.RealExperience {
	return predicate.RealExperience(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RealExperience) predicate.RealExperience {
	return predicate.RealExperience(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RealExperience) predicate.RealExperience {
	return predicate.RealExperience(sql.NotPredicates(p))
}
