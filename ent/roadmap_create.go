// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/mentor"
	"itamconnect/ent/roadmap"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoadMapCreate is the builder for creating a RoadMap entity.
type RoadMapCreate struct {
	config
	mutation *RoadMapMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rmc *RoadMapCreate) SetName(s string) *RoadMapCreate {
	rmc.mutation.SetName(s)
	return rmc
}

// SetTags sets the "tags" field.
func (rmc *RoadMapCreate) SetTags(s []string) *RoadMapCreate {
	rmc.mutation.SetTags(s)
	return rmc
}

// SetText sets the "text" field.
func (rmc *RoadMapCreate) SetText(s string) *RoadMapCreate {
	rmc.mutation.SetText(s)
	return rmc
}

// SetAuthorID sets the "author" edge to the Mentor entity by ID.
func (rmc *RoadMapCreate) SetAuthorID(id int) *RoadMapCreate {
	rmc.mutation.SetAuthorID(id)
	return rmc
}

// SetAuthor sets the "author" edge to the Mentor entity.
func (rmc *RoadMapCreate) SetAuthor(m *Mentor) *RoadMapCreate {
	return rmc.SetAuthorID(m.ID)
}

// Mutation returns the RoadMapMutation object of the builder.
func (rmc *RoadMapCreate) Mutation() *RoadMapMutation {
	return rmc.mutation
}

// Save creates the RoadMap in the database.
func (rmc *RoadMapCreate) Save(ctx context.Context) (*RoadMap, error) {
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RoadMapCreate) SaveX(ctx context.Context) *RoadMap {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RoadMapCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RoadMapCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RoadMapCreate) check() error {
	if _, ok := rmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RoadMap.name"`)}
	}
	if _, ok := rmc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "RoadMap.tags"`)}
	}
	if _, ok := rmc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "RoadMap.text"`)}
	}
	if _, ok := rmc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "RoadMap.author"`)}
	}
	return nil
}

func (rmc *RoadMapCreate) sqlSave(ctx context.Context) (*RoadMap, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RoadMapCreate) createSpec() (*RoadMap, *sqlgraph.CreateSpec) {
	var (
		_node = &RoadMap{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(roadmap.Table, sqlgraph.NewFieldSpec(roadmap.FieldID, field.TypeInt))
	)
	_spec.Schema = rmc.schemaConfig.RoadMap
	_spec.OnConflict = rmc.conflict
	if value, ok := rmc.mutation.Name(); ok {
		_spec.SetField(roadmap.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rmc.mutation.Tags(); ok {
		_spec.SetField(roadmap.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := rmc.mutation.Text(); ok {
		_spec.SetField(roadmap.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if nodes := rmc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roadmap.AuthorTable,
			Columns: []string{roadmap.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = rmc.schemaConfig.RoadMap
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.road_map_author = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoadMap.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoadMapUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rmc *RoadMapCreate) OnConflict(opts ...sql.ConflictOption) *RoadMapUpsertOne {
	rmc.conflict = opts
	return &RoadMapUpsertOne{
		create: rmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoadMap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmc *RoadMapCreate) OnConflictColumns(columns ...string) *RoadMapUpsertOne {
	rmc.conflict = append(rmc.conflict, sql.ConflictColumns(columns...))
	return &RoadMapUpsertOne{
		create: rmc,
	}
}

type (
	// RoadMapUpsertOne is the builder for "upsert"-ing
	//  one RoadMap node.
	RoadMapUpsertOne struct {
		create *RoadMapCreate
	}

	// RoadMapUpsert is the "OnConflict" setter.
	RoadMapUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *RoadMapUpsert) SetName(v string) *RoadMapUpsert {
	u.Set(roadmap.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoadMapUpsert) UpdateName() *RoadMapUpsert {
	u.SetExcluded(roadmap.FieldName)
	return u
}

// SetTags sets the "tags" field.
func (u *RoadMapUpsert) SetTags(v []string) *RoadMapUpsert {
	u.Set(roadmap.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *RoadMapUpsert) UpdateTags() *RoadMapUpsert {
	u.SetExcluded(roadmap.FieldTags)
	return u
}

// SetText sets the "text" field.
func (u *RoadMapUpsert) SetText(v string) *RoadMapUpsert {
	u.Set(roadmap.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *RoadMapUpsert) UpdateText() *RoadMapUpsert {
	u.SetExcluded(roadmap.FieldText)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RoadMap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RoadMapUpsertOne) UpdateNewValues() *RoadMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoadMap.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RoadMapUpsertOne) Ignore() *RoadMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoadMapUpsertOne) DoNothing() *RoadMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoadMapCreate.OnConflict
// documentation for more info.
func (u *RoadMapUpsertOne) Update(set func(*RoadMapUpsert)) *RoadMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoadMapUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RoadMapUpsertOne) SetName(v string) *RoadMapUpsertOne {
	return u.Update(func(s *RoadMapUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoadMapUpsertOne) UpdateName() *RoadMapUpsertOne {
	return u.Update(func(s *RoadMapUpsert) {
		s.UpdateName()
	})
}

// SetTags sets the "tags" field.
func (u *RoadMapUpsertOne) SetTags(v []string) *RoadMapUpsertOne {
	return u.Update(func(s *RoadMapUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *RoadMapUpsertOne) UpdateTags() *RoadMapUpsertOne {
	return u.Update(func(s *RoadMapUpsert) {
		s.UpdateTags()
	})
}

// SetText sets the "text" field.
func (u *RoadMapUpsertOne) SetText(v string) *RoadMapUpsertOne {
	return u.Update(func(s *RoadMapUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *RoadMapUpsertOne) UpdateText() *RoadMapUpsertOne {
	return u.Update(func(s *RoadMapUpsert) {
		s.UpdateText()
	})
}

// Exec executes the query.
func (u *RoadMapUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoadMapCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoadMapUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RoadMapUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RoadMapUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RoadMapCreateBulk is the builder for creating many RoadMap entities in bulk.
type RoadMapCreateBulk struct {
	config
	err      error
	builders []*RoadMapCreate
	conflict []sql.ConflictOption
}

// Save creates the RoadMap entities in the database.
func (rmcb *RoadMapCreateBulk) Save(ctx context.Context) ([]*RoadMap, error) {
	if rmcb.err != nil {
		return nil, rmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RoadMap, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoadMapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RoadMapCreateBulk) SaveX(ctx context.Context) []*RoadMap {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RoadMapCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RoadMapCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoadMap.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoadMapUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rmcb *RoadMapCreateBulk) OnConflict(opts ...sql.ConflictOption) *RoadMapUpsertBulk {
	rmcb.conflict = opts
	return &RoadMapUpsertBulk{
		create: rmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoadMap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmcb *RoadMapCreateBulk) OnConflictColumns(columns ...string) *RoadMapUpsertBulk {
	rmcb.conflict = append(rmcb.conflict, sql.ConflictColumns(columns...))
	return &RoadMapUpsertBulk{
		create: rmcb,
	}
}

// RoadMapUpsertBulk is the builder for "upsert"-ing
// a bulk of RoadMap nodes.
type RoadMapUpsertBulk struct {
	create *RoadMapCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RoadMap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RoadMapUpsertBulk) UpdateNewValues() *RoadMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoadMap.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RoadMapUpsertBulk) Ignore() *RoadMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoadMapUpsertBulk) DoNothing() *RoadMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoadMapCreateBulk.OnConflict
// documentation for more info.
func (u *RoadMapUpsertBulk) Update(set func(*RoadMapUpsert)) *RoadMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoadMapUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RoadMapUpsertBulk) SetName(v string) *RoadMapUpsertBulk {
	return u.Update(func(s *RoadMapUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoadMapUpsertBulk) UpdateName() *RoadMapUpsertBulk {
	return u.Update(func(s *RoadMapUpsert) {
		s.UpdateName()
	})
}

// SetTags sets the "tags" field.
func (u *RoadMapUpsertBulk) SetTags(v []string) *RoadMapUpsertBulk {
	return u.Update(func(s *RoadMapUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *RoadMapUpsertBulk) UpdateTags() *RoadMapUpsertBulk {
	return u.Update(func(s *RoadMapUpsert) {
		s.UpdateTags()
	})
}

// SetText sets the "text" field.
func (u *RoadMapUpsertBulk) SetText(v string) *RoadMapUpsertBulk {
	return u.Update(func(s *RoadMapUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *RoadMapUpsertBulk) UpdateText() *RoadMapUpsertBulk {
	return u.Update(func(s *RoadMapUpsert) {
		s.UpdateText()
	})
}

// Exec executes the query.
func (u *RoadMapUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RoadMapCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoadMapCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoadMapUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
