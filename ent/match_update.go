// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/internal"
	"itamconnect/ent/match"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/message"
	"itamconnect/ent/predicate"
	"itamconnect/internal/domain/valueobject"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchUpdate is the builder for updating Match entities.
type MatchUpdate struct {
	config
	hooks    []Hook
	mutation *MatchMutation
}

// Where appends a list predicates to the MatchUpdate builder.
func (mu *MatchUpdate) Where(ps ...predicate.Match) *MatchUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MatchUpdate) SetStatus(vs valueobject.MatchStatus) *MatchUpdate {
	mu.mutation.SetStatus(vs)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableStatus(vs *valueobject.MatchStatus) *MatchUpdate {
	if vs != nil {
		mu.SetStatus(*vs)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MatchUpdate) SetCreatedAt(t time.Time) *MatchUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableCreatedAt(t *time.Time) *MatchUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetMentorID sets the "mentor_id" field.
func (mu *MatchUpdate) SetMentorID(i int) *MatchUpdate {
	mu.mutation.SetMentorID(i)
	return mu
}

// SetNillableMentorID sets the "mentor_id" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableMentorID(i *int) *MatchUpdate {
	if i != nil {
		mu.SetMentorID(*i)
	}
	return mu
}

// SetMentiID sets the "menti_id" field.
func (mu *MatchUpdate) SetMentiID(i int) *MatchUpdate {
	mu.mutation.SetMentiID(i)
	return mu
}

// SetNillableMentiID sets the "menti_id" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableMentiID(i *int) *MatchUpdate {
	if i != nil {
		mu.SetMentiID(*i)
	}
	return mu
}

// SetMentor sets the "mentor" edge to the Mentor entity.
func (mu *MatchUpdate) SetMentor(m *Mentor) *MatchUpdate {
	return mu.SetMentorID(m.ID)
}

// SetMenti sets the "menti" edge to the Menti entity.
func (mu *MatchUpdate) SetMenti(m *Menti) *MatchUpdate {
	return mu.SetMentiID(m.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (mu *MatchUpdate) AddMessageIDs(ids ...int) *MatchUpdate {
	mu.mutation.AddMessageIDs(ids...)
	return mu
}

// AddMessages adds the "messages" edges to the Message entity.
func (mu *MatchUpdate) AddMessages(m ...*Message) *MatchUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMessageIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mu *MatchUpdate) Mutation() *MatchMutation {
	return mu.mutation
}

// ClearMentor clears the "mentor" edge to the Mentor entity.
func (mu *MatchUpdate) ClearMentor() *MatchUpdate {
	mu.mutation.ClearMentor()
	return mu
}

// ClearMenti clears the "menti" edge to the Menti entity.
func (mu *MatchUpdate) ClearMenti() *MatchUpdate {
	mu.mutation.ClearMenti()
	return mu
}

// ClearMessages clears all "messages" edges to the Message entity.
func (mu *MatchUpdate) ClearMessages() *MatchUpdate {
	mu.mutation.ClearMessages()
	return mu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (mu *MatchUpdate) RemoveMessageIDs(ids ...int) *MatchUpdate {
	mu.mutation.RemoveMessageIDs(ids...)
	return mu
}

// RemoveMessages removes "messages" edges to Message entities.
func (mu *MatchUpdate) RemoveMessages(m ...*Message) *MatchUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MatchUpdate) check() error {
	if v, ok := mu.mutation.Status(); ok {
		if err := match.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Match.status": %w`, err)}
		}
	}
	if _, ok := mu.mutation.MentorID(); mu.mutation.MentorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.mentor"`)
	}
	if _, ok := mu.mutation.MentiID(); mu.mutation.MentiCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.menti"`)
	}
	return nil
}

func (mu *MatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentorTable,
			Columns: []string{match.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentorTable,
			Columns: []string{match.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MentiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentiTable,
			Columns: []string{match.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MentiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentiTable,
			Columns: []string{match.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   match.MessagesTable,
			Columns: []string{match.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Message
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !mu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   match.MessagesTable,
			Columns: []string{match.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Message
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   match.MessagesTable,
			Columns: []string{match.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Message
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mu.schemaConfig.Match
	ctx = internal.NewSchemaConfigContext(ctx, mu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchUpdateOne is the builder for updating a single Match entity.
type MatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchMutation
}

// SetStatus sets the "status" field.
func (muo *MatchUpdateOne) SetStatus(vs valueobject.MatchStatus) *MatchUpdateOne {
	muo.mutation.SetStatus(vs)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableStatus(vs *valueobject.MatchStatus) *MatchUpdateOne {
	if vs != nil {
		muo.SetStatus(*vs)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MatchUpdateOne) SetCreatedAt(t time.Time) *MatchUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableCreatedAt(t *time.Time) *MatchUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetMentorID sets the "mentor_id" field.
func (muo *MatchUpdateOne) SetMentorID(i int) *MatchUpdateOne {
	muo.mutation.SetMentorID(i)
	return muo
}

// SetNillableMentorID sets the "mentor_id" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableMentorID(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetMentorID(*i)
	}
	return muo
}

// SetMentiID sets the "menti_id" field.
func (muo *MatchUpdateOne) SetMentiID(i int) *MatchUpdateOne {
	muo.mutation.SetMentiID(i)
	return muo
}

// SetNillableMentiID sets the "menti_id" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableMentiID(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetMentiID(*i)
	}
	return muo
}

// SetMentor sets the "mentor" edge to the Mentor entity.
func (muo *MatchUpdateOne) SetMentor(m *Mentor) *MatchUpdateOne {
	return muo.SetMentorID(m.ID)
}

// SetMenti sets the "menti" edge to the Menti entity.
func (muo *MatchUpdateOne) SetMenti(m *Menti) *MatchUpdateOne {
	return muo.SetMentiID(m.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (muo *MatchUpdateOne) AddMessageIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.AddMessageIDs(ids...)
	return muo
}

// AddMessages adds the "messages" edges to the Message entity.
func (muo *MatchUpdateOne) AddMessages(m ...*Message) *MatchUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMessageIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (muo *MatchUpdateOne) Mutation() *MatchMutation {
	return muo.mutation
}

// ClearMentor clears the "mentor" edge to the Mentor entity.
func (muo *MatchUpdateOne) ClearMentor() *MatchUpdateOne {
	muo.mutation.ClearMentor()
	return muo
}

// ClearMenti clears the "menti" edge to the Menti entity.
func (muo *MatchUpdateOne) ClearMenti() *MatchUpdateOne {
	muo.mutation.ClearMenti()
	return muo
}

// ClearMessages clears all "messages" edges to the Message entity.
func (muo *MatchUpdateOne) ClearMessages() *MatchUpdateOne {
	muo.mutation.ClearMessages()
	return muo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (muo *MatchUpdateOne) RemoveMessageIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.RemoveMessageIDs(ids...)
	return muo
}

// RemoveMessages removes "messages" edges to Message entities.
func (muo *MatchUpdateOne) RemoveMessages(m ...*Message) *MatchUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the MatchUpdate builder.
func (muo *MatchUpdateOne) Where(ps ...predicate.Match) *MatchUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchUpdateOne) Select(field string, fields ...string) *MatchUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Match entity.
func (muo *MatchUpdateOne) Save(ctx context.Context) (*Match, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchUpdateOne) SaveX(ctx context.Context) *Match {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MatchUpdateOne) check() error {
	if v, ok := muo.mutation.Status(); ok {
		if err := match.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Match.status": %w`, err)}
		}
	}
	if _, ok := muo.mutation.MentorID(); muo.mutation.MentorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.mentor"`)
	}
	if _, ok := muo.mutation.MentiID(); muo.mutation.MentiCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.menti"`)
	}
	return nil
}

func (muo *MatchUpdateOne) sqlSave(ctx context.Context) (_node *Match, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Match.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, match.FieldID)
		for _, f := range fields {
			if !match.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != match.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentorTable,
			Columns: []string{match.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentorTable,
			Columns: []string{match.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MentiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentiTable,
			Columns: []string{match.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MentiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentiTable,
			Columns: []string{match.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   match.MessagesTable,
			Columns: []string{match.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Message
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !muo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   match.MessagesTable,
			Columns: []string{match.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Message
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   match.MessagesTable,
			Columns: []string{match.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Message
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = muo.schemaConfig.Match
	ctx = internal.NewSchemaConfigContext(ctx, muo.schemaConfig)
	_node = &Match{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
