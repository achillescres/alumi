// Code generated by ent, DO NOT EDIT.

package mentor

import (
	"itamconnect/ent/internal"
	"itamconnect/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Mentor {
	return predicate.Mentor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Mentor {
	return predicate.Mentor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Mentor {
	return predicate.Mentor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Mentor {
	return predicate.Mentor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Mentor {
	return predicate.Mentor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Mentor {
	return predicate.Mentor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Mentor {
	return predicate.Mentor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Mentor {
	return predicate.Mentor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Mentor {
	return predicate.Mentor(sql.FieldLTE(FieldID, id))
}

// SearchFor applies equality check predicate on the "search_for" field. It's identical to SearchForEQ.
func SearchFor(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldEQ(FieldSearchFor, v))
}

// SearchForEQ applies the EQ predicate on the "search_for" field.
func SearchForEQ(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldEQ(FieldSearchFor, v))
}

// SearchForNEQ applies the NEQ predicate on the "search_for" field.
func SearchForNEQ(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldNEQ(FieldSearchFor, v))
}

// SearchForIn applies the In predicate on the "search_for" field.
func SearchForIn(vs ...string) predicate.Mentor {
	return predicate.Mentor(sql.FieldIn(FieldSearchFor, vs...))
}

// SearchForNotIn applies the NotIn predicate on the "search_for" field.
func SearchForNotIn(vs ...string) predicate.Mentor {
	return predicate.Mentor(sql.FieldNotIn(FieldSearchFor, vs...))
}

// SearchForGT applies the GT predicate on the "search_for" field.
func SearchForGT(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldGT(FieldSearchFor, v))
}

// SearchForGTE applies the GTE predicate on the "search_for" field.
func SearchForGTE(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldGTE(FieldSearchFor, v))
}

// SearchForLT applies the LT predicate on the "search_for" field.
func SearchForLT(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldLT(FieldSearchFor, v))
}

// SearchForLTE applies the LTE predicate on the "search_for" field.
func SearchForLTE(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldLTE(FieldSearchFor, v))
}

// SearchForContains applies the Contains predicate on the "search_for" field.
func SearchForContains(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldContains(FieldSearchFor, v))
}

// SearchForHasPrefix applies the HasPrefix predicate on the "search_for" field.
func SearchForHasPrefix(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldHasPrefix(FieldSearchFor, v))
}

// SearchForHasSuffix applies the HasSuffix predicate on the "search_for" field.
func SearchForHasSuffix(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldHasSuffix(FieldSearchFor, v))
}

// SearchForEqualFold applies the EqualFold predicate on the "search_for" field.
func SearchForEqualFold(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldEqualFold(FieldSearchFor, v))
}

// SearchForContainsFold applies the ContainsFold predicate on the "search_for" field.
func SearchForContainsFold(v string) predicate.Mentor {
	return predicate.Mentor(sql.FieldContainsFold(FieldSearchFor, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Mentor {
	return predicate.Mentor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Mentor {
	return predicate.Mentor(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMentis applies the HasEdge predicate on the "mentis" edge.
func HasMentis() predicate.Mentor {
	return predicate.Mentor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MentisTable, MentisPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Menti
		step.Edge.Schema = schemaConfig.Match
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentisWith applies the HasEdge predicate on the "mentis" edge with a given conditions (other predicates).
func HasMentisWith(preds ...predicate.Menti) predicate.Mentor {
	return predicate.Mentor(func(s *sql.Selector) {
		step := newMentisStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Menti
		step.Edge.Schema = schemaConfig.Match
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMatches applies the HasEdge predicate on the "matches" edge.
func HasMatches() predicate.Mentor {
	return predicate.Mentor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MatchesTable, MatchesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Match
		step.Edge.Schema = schemaConfig.Match
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchesWith applies the HasEdge predicate on the "matches" edge with a given conditions (other predicates).
func HasMatchesWith(preds ...predicate.Match) predicate.Mentor {
	return predicate.Mentor(func(s *sql.Selector) {
		step := newMatchesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Match
		step.Edge.Schema = schemaConfig.Match
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mentor) predicate.Mentor {
	return predicate.Mentor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mentor) predicate.Mentor {
	return predicate.Mentor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mentor) predicate.Mentor {
	return predicate.Mentor(sql.NotPredicates(p))
}
