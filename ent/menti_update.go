// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/internal"
	"itamconnect/ent/match"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/predicate"
	"itamconnect/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MentiUpdate is the builder for updating Menti entities.
type MentiUpdate struct {
	config
	hooks    []Hook
	mutation *MentiMutation
}

// Where appends a list predicates to the MentiUpdate builder.
func (mu *MentiUpdate) Where(ps ...predicate.Menti) *MentiUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (mu *MentiUpdate) AddUserIDs(ids ...int) *MentiUpdate {
	mu.mutation.AddUserIDs(ids...)
	return mu
}

// AddUser adds the "user" edges to the User entity.
func (mu *MentiUpdate) AddUser(u ...*User) *MentiUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddUserIDs(ids...)
}

// AddMentorIDs adds the "mentors" edge to the Mentor entity by IDs.
func (mu *MentiUpdate) AddMentorIDs(ids ...int) *MentiUpdate {
	mu.mutation.AddMentorIDs(ids...)
	return mu
}

// AddMentors adds the "mentors" edges to the Mentor entity.
func (mu *MentiUpdate) AddMentors(m ...*Mentor) *MentiUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMentorIDs(ids...)
}

// AddMatchIDs adds the "matches" edge to the Match entity by IDs.
func (mu *MentiUpdate) AddMatchIDs(ids ...int) *MentiUpdate {
	mu.mutation.AddMatchIDs(ids...)
	return mu
}

// AddMatches adds the "matches" edges to the Match entity.
func (mu *MentiUpdate) AddMatches(m ...*Match) *MentiUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMatchIDs(ids...)
}

// Mutation returns the MentiMutation object of the builder.
func (mu *MentiUpdate) Mutation() *MentiMutation {
	return mu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (mu *MentiUpdate) ClearUser() *MentiUpdate {
	mu.mutation.ClearUser()
	return mu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (mu *MentiUpdate) RemoveUserIDs(ids ...int) *MentiUpdate {
	mu.mutation.RemoveUserIDs(ids...)
	return mu
}

// RemoveUser removes "user" edges to User entities.
func (mu *MentiUpdate) RemoveUser(u ...*User) *MentiUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveUserIDs(ids...)
}

// ClearMentors clears all "mentors" edges to the Mentor entity.
func (mu *MentiUpdate) ClearMentors() *MentiUpdate {
	mu.mutation.ClearMentors()
	return mu
}

// RemoveMentorIDs removes the "mentors" edge to Mentor entities by IDs.
func (mu *MentiUpdate) RemoveMentorIDs(ids ...int) *MentiUpdate {
	mu.mutation.RemoveMentorIDs(ids...)
	return mu
}

// RemoveMentors removes "mentors" edges to Mentor entities.
func (mu *MentiUpdate) RemoveMentors(m ...*Mentor) *MentiUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMentorIDs(ids...)
}

// ClearMatches clears all "matches" edges to the Match entity.
func (mu *MentiUpdate) ClearMatches() *MentiUpdate {
	mu.mutation.ClearMatches()
	return mu
}

// RemoveMatchIDs removes the "matches" edge to Match entities by IDs.
func (mu *MentiUpdate) RemoveMatchIDs(ids ...int) *MentiUpdate {
	mu.mutation.RemoveMatchIDs(ids...)
	return mu
}

// RemoveMatches removes "matches" edges to Match entities.
func (mu *MentiUpdate) RemoveMatches(m ...*Match) *MentiUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMatchIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MentiUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MentiUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MentiUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MentiUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MentiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menti.Table, menti.Columns, sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.UserTable,
			Columns: []string{menti.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedUserIDs(); len(nodes) > 0 && !mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.UserTable,
			Columns: []string{menti.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.UserTable,
			Columns: []string{menti.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MentorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menti.MentorsTable,
			Columns: menti.MentorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		createE := &MatchCreate{config: mu.config, mutation: newMatchMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMentorsIDs(); len(nodes) > 0 && !mu.mutation.MentorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menti.MentorsTable,
			Columns: menti.MentorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MatchCreate{config: mu.config, mutation: newMatchMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MentorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menti.MentorsTable,
			Columns: menti.MentorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MatchCreate{config: mu.config, mutation: newMatchMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.MatchesTable,
			Columns: []string{menti.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMatchesIDs(); len(nodes) > 0 && !mu.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.MatchesTable,
			Columns: []string{menti.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.MatchesTable,
			Columns: []string{menti.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mu.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mu.schemaConfig.Menti
	ctx = internal.NewSchemaConfigContext(ctx, mu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menti.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MentiUpdateOne is the builder for updating a single Menti entity.
type MentiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MentiMutation
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (muo *MentiUpdateOne) AddUserIDs(ids ...int) *MentiUpdateOne {
	muo.mutation.AddUserIDs(ids...)
	return muo
}

// AddUser adds the "user" edges to the User entity.
func (muo *MentiUpdateOne) AddUser(u ...*User) *MentiUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddUserIDs(ids...)
}

// AddMentorIDs adds the "mentors" edge to the Mentor entity by IDs.
func (muo *MentiUpdateOne) AddMentorIDs(ids ...int) *MentiUpdateOne {
	muo.mutation.AddMentorIDs(ids...)
	return muo
}

// AddMentors adds the "mentors" edges to the Mentor entity.
func (muo *MentiUpdateOne) AddMentors(m ...*Mentor) *MentiUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMentorIDs(ids...)
}

// AddMatchIDs adds the "matches" edge to the Match entity by IDs.
func (muo *MentiUpdateOne) AddMatchIDs(ids ...int) *MentiUpdateOne {
	muo.mutation.AddMatchIDs(ids...)
	return muo
}

// AddMatches adds the "matches" edges to the Match entity.
func (muo *MentiUpdateOne) AddMatches(m ...*Match) *MentiUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMatchIDs(ids...)
}

// Mutation returns the MentiMutation object of the builder.
func (muo *MentiUpdateOne) Mutation() *MentiMutation {
	return muo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (muo *MentiUpdateOne) ClearUser() *MentiUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (muo *MentiUpdateOne) RemoveUserIDs(ids ...int) *MentiUpdateOne {
	muo.mutation.RemoveUserIDs(ids...)
	return muo
}

// RemoveUser removes "user" edges to User entities.
func (muo *MentiUpdateOne) RemoveUser(u ...*User) *MentiUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveUserIDs(ids...)
}

// ClearMentors clears all "mentors" edges to the Mentor entity.
func (muo *MentiUpdateOne) ClearMentors() *MentiUpdateOne {
	muo.mutation.ClearMentors()
	return muo
}

// RemoveMentorIDs removes the "mentors" edge to Mentor entities by IDs.
func (muo *MentiUpdateOne) RemoveMentorIDs(ids ...int) *MentiUpdateOne {
	muo.mutation.RemoveMentorIDs(ids...)
	return muo
}

// RemoveMentors removes "mentors" edges to Mentor entities.
func (muo *MentiUpdateOne) RemoveMentors(m ...*Mentor) *MentiUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMentorIDs(ids...)
}

// ClearMatches clears all "matches" edges to the Match entity.
func (muo *MentiUpdateOne) ClearMatches() *MentiUpdateOne {
	muo.mutation.ClearMatches()
	return muo
}

// RemoveMatchIDs removes the "matches" edge to Match entities by IDs.
func (muo *MentiUpdateOne) RemoveMatchIDs(ids ...int) *MentiUpdateOne {
	muo.mutation.RemoveMatchIDs(ids...)
	return muo
}

// RemoveMatches removes "matches" edges to Match entities.
func (muo *MentiUpdateOne) RemoveMatches(m ...*Match) *MentiUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMatchIDs(ids...)
}

// Where appends a list predicates to the MentiUpdate builder.
func (muo *MentiUpdateOne) Where(ps ...predicate.Menti) *MentiUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MentiUpdateOne) Select(field string, fields ...string) *MentiUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menti entity.
func (muo *MentiUpdateOne) Save(ctx context.Context) (*Menti, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MentiUpdateOne) SaveX(ctx context.Context) *Menti {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MentiUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MentiUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MentiUpdateOne) sqlSave(ctx context.Context) (_node *Menti, err error) {
	_spec := sqlgraph.NewUpdateSpec(menti.Table, menti.Columns, sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menti.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menti.FieldID)
		for _, f := range fields {
			if !menti.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menti.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.UserTable,
			Columns: []string{menti.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedUserIDs(); len(nodes) > 0 && !muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.UserTable,
			Columns: []string{menti.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.UserTable,
			Columns: []string{menti.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MentorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menti.MentorsTable,
			Columns: menti.MentorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		createE := &MatchCreate{config: muo.config, mutation: newMatchMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMentorsIDs(); len(nodes) > 0 && !muo.mutation.MentorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menti.MentorsTable,
			Columns: menti.MentorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MatchCreate{config: muo.config, mutation: newMatchMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MentorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menti.MentorsTable,
			Columns: menti.MentorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MatchCreate{config: muo.config, mutation: newMatchMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.MatchesTable,
			Columns: []string{menti.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMatchesIDs(); len(nodes) > 0 && !muo.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.MatchesTable,
			Columns: []string{menti.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menti.MatchesTable,
			Columns: []string{menti.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		edge.Schema = muo.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = muo.schemaConfig.Menti
	ctx = internal.NewSchemaConfigContext(ctx, muo.schemaConfig)
	_node = &Menti{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menti.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
