// Code generated by ent, DO NOT EDIT.

package user

import (
	"itamconnect/ent/internal"
	"itamconnect/ent/predicate"
	"itamconnect/internal/domain/valueobject"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Login applies equality check predicate on the "login" field. It's identical to LoginEQ.
func Login(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogin, v))
}

// HashedPassword applies equality check predicate on the "hashed_password" field. It's identical to HashedPasswordEQ.
func HashedPassword(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashedPassword, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldEQ(FieldEmail, vc))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBio, v))
}

// EducationInfo applies equality check predicate on the "education_info" field. It's identical to EducationInfoEQ.
func EducationInfo(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEducationInfo, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// Telegram applies equality check predicate on the "telegram" field. It's identical to TelegramEQ.
func Telegram(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegram, v))
}

// OtherContacts applies equality check predicate on the "other_contacts" field. It's identical to OtherContactsEQ.
func OtherContacts(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOtherContacts, v))
}

// LoginEQ applies the EQ predicate on the "login" field.
func LoginEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogin, v))
}

// LoginNEQ applies the NEQ predicate on the "login" field.
func LoginNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLogin, v))
}

// LoginIn applies the In predicate on the "login" field.
func LoginIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLogin, vs...))
}

// LoginNotIn applies the NotIn predicate on the "login" field.
func LoginNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLogin, vs...))
}

// LoginGT applies the GT predicate on the "login" field.
func LoginGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLogin, v))
}

// LoginGTE applies the GTE predicate on the "login" field.
func LoginGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLogin, v))
}

// LoginLT applies the LT predicate on the "login" field.
func LoginLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLogin, v))
}

// LoginLTE applies the LTE predicate on the "login" field.
func LoginLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLogin, v))
}

// LoginContains applies the Contains predicate on the "login" field.
func LoginContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLogin, v))
}

// LoginHasPrefix applies the HasPrefix predicate on the "login" field.
func LoginHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLogin, v))
}

// LoginHasSuffix applies the HasSuffix predicate on the "login" field.
func LoginHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLogin, v))
}

// LoginEqualFold applies the EqualFold predicate on the "login" field.
func LoginEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLogin, v))
}

// LoginContainsFold applies the ContainsFold predicate on the "login" field.
func LoginContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLogin, v))
}

// HashedPasswordEQ applies the EQ predicate on the "hashed_password" field.
func HashedPasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashedPassword, v))
}

// HashedPasswordNEQ applies the NEQ predicate on the "hashed_password" field.
func HashedPasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHashedPassword, v))
}

// HashedPasswordIn applies the In predicate on the "hashed_password" field.
func HashedPasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHashedPassword, vs...))
}

// HashedPasswordNotIn applies the NotIn predicate on the "hashed_password" field.
func HashedPasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHashedPassword, vs...))
}

// HashedPasswordGT applies the GT predicate on the "hashed_password" field.
func HashedPasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHashedPassword, v))
}

// HashedPasswordGTE applies the GTE predicate on the "hashed_password" field.
func HashedPasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHashedPassword, v))
}

// HashedPasswordLT applies the LT predicate on the "hashed_password" field.
func HashedPasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHashedPassword, v))
}

// HashedPasswordLTE applies the LTE predicate on the "hashed_password" field.
func HashedPasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHashedPassword, v))
}

// HashedPasswordContains applies the Contains predicate on the "hashed_password" field.
func HashedPasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHashedPassword, v))
}

// HashedPasswordHasPrefix applies the HasPrefix predicate on the "hashed_password" field.
func HashedPasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHashedPassword, v))
}

// HashedPasswordHasSuffix applies the HasSuffix predicate on the "hashed_password" field.
func HashedPasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHashedPassword, v))
}

// HashedPasswordEqualFold applies the EqualFold predicate on the "hashed_password" field.
func HashedPasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHashedPassword, v))
}

// HashedPasswordContainsFold applies the ContainsFold predicate on the "hashed_password" field.
func HashedPasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHashedPassword, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldEQ(FieldEmail, vc))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldNEQ(FieldEmail, vc))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...valueobject.Email) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.User(sql.FieldIn(FieldEmail, v...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...valueobject.Email) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.User(sql.FieldNotIn(FieldEmail, v...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldGT(FieldEmail, vc))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldGTE(FieldEmail, vc))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldLT(FieldEmail, vc))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldLTE(FieldEmail, vc))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldContains(FieldEmail, vc))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldHasPrefix(FieldEmail, vc))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldHasSuffix(FieldEmail, vc))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldEqualFold(FieldEmail, vc))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v valueobject.Email) predicate.User {
	vc := string(v)
	return predicate.User(sql.FieldContainsFold(FieldEmail, vc))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldBio, v))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldBio, v))
}

// EducationInfoEQ applies the EQ predicate on the "education_info" field.
func EducationInfoEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEducationInfo, v))
}

// EducationInfoNEQ applies the NEQ predicate on the "education_info" field.
func EducationInfoNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEducationInfo, v))
}

// EducationInfoIn applies the In predicate on the "education_info" field.
func EducationInfoIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEducationInfo, vs...))
}

// EducationInfoNotIn applies the NotIn predicate on the "education_info" field.
func EducationInfoNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEducationInfo, vs...))
}

// EducationInfoGT applies the GT predicate on the "education_info" field.
func EducationInfoGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEducationInfo, v))
}

// EducationInfoGTE applies the GTE predicate on the "education_info" field.
func EducationInfoGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEducationInfo, v))
}

// EducationInfoLT applies the LT predicate on the "education_info" field.
func EducationInfoLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEducationInfo, v))
}

// EducationInfoLTE applies the LTE predicate on the "education_info" field.
func EducationInfoLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEducationInfo, v))
}

// EducationInfoContains applies the Contains predicate on the "education_info" field.
func EducationInfoContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEducationInfo, v))
}

// EducationInfoHasPrefix applies the HasPrefix predicate on the "education_info" field.
func EducationInfoHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEducationInfo, v))
}

// EducationInfoHasSuffix applies the HasSuffix predicate on the "education_info" field.
func EducationInfoHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEducationInfo, v))
}

// EducationInfoEqualFold applies the EqualFold predicate on the "education_info" field.
func EducationInfoEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEducationInfo, v))
}

// EducationInfoContainsFold applies the ContainsFold predicate on the "education_info" field.
func EducationInfoContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEducationInfo, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// TelegramEQ applies the EQ predicate on the "telegram" field.
func TelegramEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegram, v))
}

// TelegramNEQ applies the NEQ predicate on the "telegram" field.
func TelegramNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTelegram, v))
}

// TelegramIn applies the In predicate on the "telegram" field.
func TelegramIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTelegram, vs...))
}

// TelegramNotIn applies the NotIn predicate on the "telegram" field.
func TelegramNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTelegram, vs...))
}

// TelegramGT applies the GT predicate on the "telegram" field.
func TelegramGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTelegram, v))
}

// TelegramGTE applies the GTE predicate on the "telegram" field.
func TelegramGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTelegram, v))
}

// TelegramLT applies the LT predicate on the "telegram" field.
func TelegramLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTelegram, v))
}

// TelegramLTE applies the LTE predicate on the "telegram" field.
func TelegramLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTelegram, v))
}

// TelegramContains applies the Contains predicate on the "telegram" field.
func TelegramContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTelegram, v))
}

// TelegramHasPrefix applies the HasPrefix predicate on the "telegram" field.
func TelegramHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTelegram, v))
}

// TelegramHasSuffix applies the HasSuffix predicate on the "telegram" field.
func TelegramHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTelegram, v))
}

// TelegramIsNil applies the IsNil predicate on the "telegram" field.
func TelegramIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTelegram))
}

// TelegramNotNil applies the NotNil predicate on the "telegram" field.
func TelegramNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTelegram))
}

// TelegramEqualFold applies the EqualFold predicate on the "telegram" field.
func TelegramEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTelegram, v))
}

// TelegramContainsFold applies the ContainsFold predicate on the "telegram" field.
func TelegramContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTelegram, v))
}

// OtherContactsEQ applies the EQ predicate on the "other_contacts" field.
func OtherContactsEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOtherContacts, v))
}

// OtherContactsNEQ applies the NEQ predicate on the "other_contacts" field.
func OtherContactsNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOtherContacts, v))
}

// OtherContactsIn applies the In predicate on the "other_contacts" field.
func OtherContactsIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOtherContacts, vs...))
}

// OtherContactsNotIn applies the NotIn predicate on the "other_contacts" field.
func OtherContactsNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOtherContacts, vs...))
}

// OtherContactsGT applies the GT predicate on the "other_contacts" field.
func OtherContactsGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOtherContacts, v))
}

// OtherContactsGTE applies the GTE predicate on the "other_contacts" field.
func OtherContactsGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOtherContacts, v))
}

// OtherContactsLT applies the LT predicate on the "other_contacts" field.
func OtherContactsLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOtherContacts, v))
}

// OtherContactsLTE applies the LTE predicate on the "other_contacts" field.
func OtherContactsLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOtherContacts, v))
}

// OtherContactsContains applies the Contains predicate on the "other_contacts" field.
func OtherContactsContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOtherContacts, v))
}

// OtherContactsHasPrefix applies the HasPrefix predicate on the "other_contacts" field.
func OtherContactsHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOtherContacts, v))
}

// OtherContactsHasSuffix applies the HasSuffix predicate on the "other_contacts" field.
func OtherContactsHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOtherContacts, v))
}

// OtherContactsIsNil applies the IsNil predicate on the "other_contacts" field.
func OtherContactsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOtherContacts))
}

// OtherContactsNotNil applies the NotNil predicate on the "other_contacts" field.
func OtherContactsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOtherContacts))
}

// OtherContactsEqualFold applies the EqualFold predicate on the "other_contacts" field.
func OtherContactsEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOtherContacts, v))
}

// OtherContactsContainsFold applies the ContainsFold predicate on the "other_contacts" field.
func OtherContactsContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOtherContacts, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v valueobject.UserType) predicate.User {
	vc := v
	return predicate.User(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v valueobject.UserType) predicate.User {
	vc := v
	return predicate.User(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...valueobject.UserType) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...valueobject.UserType) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldNotIn(FieldType, v...))
}

// HasRealExperiences applies the HasEdge predicate on the "real_experiences" edge.
func HasRealExperiences() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RealExperiencesTable, RealExperiencesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.RealExperience
		step.Edge.Schema = schemaConfig.RealExperience
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealExperiencesWith applies the HasEdge predicate on the "real_experiences" edge with a given conditions (other predicates).
func HasRealExperiencesWith(preds ...predicate.RealExperience) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRealExperiencesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.RealExperience
		step.Edge.Schema = schemaConfig.RealExperience
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMenti applies the HasEdge predicate on the "menti" edge.
func HasMenti() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MentiTable, MentiColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Menti
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentiWith applies the HasEdge predicate on the "menti" edge with a given conditions (other predicates).
func HasMentiWith(preds ...predicate.Menti) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMentiStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Menti
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMentor applies the HasEdge predicate on the "mentor" edge.
func HasMentor() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MentorTable, MentorColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Mentor
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentorWith applies the HasEdge predicate on the "mentor" edge with a given conditions (other predicates).
func HasMentorWith(preds ...predicate.Mentor) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMentorStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Mentor
		step.Edge.Schema = schemaConfig.User
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
