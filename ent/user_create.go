// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/realexperience"
	"itamconnect/ent/skill"
	"itamconnect/ent/user"
	"itamconnect/internal/domain/valueobject"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLogin sets the "login" field.
func (uc *UserCreate) SetLogin(s string) *UserCreate {
	uc.mutation.SetLogin(s)
	return uc
}

// SetHashedPassword sets the "hashed_password" field.
func (uc *UserCreate) SetHashedPassword(s string) *UserCreate {
	uc.mutation.SetHashedPassword(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(v valueobject.Email) *UserCreate {
	uc.mutation.SetEmail(v)
	return uc
}

// SetBio sets the "bio" field.
func (uc *UserCreate) SetBio(s string) *UserCreate {
	uc.mutation.SetBio(s)
	return uc
}

// SetEducationInfo sets the "education_info" field.
func (uc *UserCreate) SetEducationInfo(s string) *UserCreate {
	uc.mutation.SetEducationInfo(s)
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetTelegram sets the "telegram" field.
func (uc *UserCreate) SetTelegram(s string) *UserCreate {
	uc.mutation.SetTelegram(s)
	return uc
}

// SetNillableTelegram sets the "telegram" field if the given value is not nil.
func (uc *UserCreate) SetNillableTelegram(s *string) *UserCreate {
	if s != nil {
		uc.SetTelegram(*s)
	}
	return uc
}

// SetOtherContacts sets the "other_contacts" field.
func (uc *UserCreate) SetOtherContacts(s string) *UserCreate {
	uc.mutation.SetOtherContacts(s)
	return uc
}

// SetNillableOtherContacts sets the "other_contacts" field if the given value is not nil.
func (uc *UserCreate) SetNillableOtherContacts(s *string) *UserCreate {
	if s != nil {
		uc.SetOtherContacts(*s)
	}
	return uc
}

// SetType sets the "type" field.
func (uc *UserCreate) SetType(vt valueobject.UserType) *UserCreate {
	uc.mutation.SetType(vt)
	return uc
}

// AddRealExperienceIDs adds the "real_experiences" edge to the RealExperience entity by IDs.
func (uc *UserCreate) AddRealExperienceIDs(ids ...int) *UserCreate {
	uc.mutation.AddRealExperienceIDs(ids...)
	return uc
}

// AddRealExperiences adds the "real_experiences" edges to the RealExperience entity.
func (uc *UserCreate) AddRealExperiences(r ...*RealExperience) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRealExperienceIDs(ids...)
}

// SetMentiID sets the "menti" edge to the Menti entity by ID.
func (uc *UserCreate) SetMentiID(id int) *UserCreate {
	uc.mutation.SetMentiID(id)
	return uc
}

// SetNillableMentiID sets the "menti" edge to the Menti entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableMentiID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetMentiID(*id)
	}
	return uc
}

// SetMenti sets the "menti" edge to the Menti entity.
func (uc *UserCreate) SetMenti(m *Menti) *UserCreate {
	return uc.SetMentiID(m.ID)
}

// SetMentorID sets the "mentor" edge to the Mentor entity by ID.
func (uc *UserCreate) SetMentorID(id int) *UserCreate {
	uc.mutation.SetMentorID(id)
	return uc
}

// SetNillableMentorID sets the "mentor" edge to the Mentor entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableMentorID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetMentorID(*id)
	}
	return uc
}

// SetMentor sets the "mentor" edge to the Mentor entity.
func (uc *UserCreate) SetMentor(m *Mentor) *UserCreate {
	return uc.SetMentorID(m.ID)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (uc *UserCreate) AddSkillIDs(ids ...int) *UserCreate {
	uc.mutation.AddSkillIDs(ids...)
	return uc
}

// AddSkills adds the "skills" edges to the Skill entity.
func (uc *UserCreate) AddSkills(s ...*Skill) *UserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSkillIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Login(); !ok {
		return &ValidationError{Name: "login", err: errors.New(`ent: missing required field "User.login"`)}
	}
	if _, ok := uc.mutation.HashedPassword(); !ok {
		return &ValidationError{Name: "hashed_password", err: errors.New(`ent: missing required field "User.hashed_password"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Bio(); !ok {
		return &ValidationError{Name: "bio", err: errors.New(`ent: missing required field "User.bio"`)}
	}
	if _, ok := uc.mutation.EducationInfo(); !ok {
		return &ValidationError{Name: "education_info", err: errors.New(`ent: missing required field "User.education_info"`)}
	}
	if _, ok := uc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "User.type"`)}
	}
	if v, ok := uc.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	if len(uc.mutation.SkillsIDs()) == 0 {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required edge "User.skills"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.Schema = uc.schemaConfig.User
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
		_node.Login = value
	}
	if value, ok := uc.mutation.HashedPassword(); ok {
		_spec.SetField(user.FieldHashedPassword, field.TypeString, value)
		_node.HashedPassword = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := uc.mutation.EducationInfo(); ok {
		_spec.SetField(user.FieldEducationInfo, field.TypeString, value)
		_node.EducationInfo = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.Telegram(); ok {
		_spec.SetField(user.FieldTelegram, field.TypeString, value)
		_node.Telegram = value
	}
	if value, ok := uc.mutation.OtherContacts(); ok {
		_spec.SetField(user.FieldOtherContacts, field.TypeString, value)
		_node.OtherContacts = value
	}
	if value, ok := uc.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := uc.mutation.RealExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RealExperiencesTable,
			Columns: []string{user.RealExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uc.schemaConfig.RealExperience
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MentiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentiTable,
			Columns: []string{user.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_menti = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentorTable,
			Columns: []string{user.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uc.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_mentor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SkillsTable,
			Columns: []string{user.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uc.schemaConfig.Skill
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetLogin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetLogin(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetLogin sets the "login" field.
func (u *UserUpsert) SetLogin(v string) *UserUpsert {
	u.Set(user.FieldLogin, v)
	return u
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsert) UpdateLogin() *UserUpsert {
	u.SetExcluded(user.FieldLogin)
	return u
}

// SetHashedPassword sets the "hashed_password" field.
func (u *UserUpsert) SetHashedPassword(v string) *UserUpsert {
	u.Set(user.FieldHashedPassword, v)
	return u
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *UserUpsert) UpdateHashedPassword() *UserUpsert {
	u.SetExcluded(user.FieldHashedPassword)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v valueobject.Email) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetBio sets the "bio" field.
func (u *UserUpsert) SetBio(v string) *UserUpsert {
	u.Set(user.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsert) UpdateBio() *UserUpsert {
	u.SetExcluded(user.FieldBio)
	return u
}

// SetEducationInfo sets the "education_info" field.
func (u *UserUpsert) SetEducationInfo(v string) *UserUpsert {
	u.Set(user.FieldEducationInfo, v)
	return u
}

// UpdateEducationInfo sets the "education_info" field to the value that was provided on create.
func (u *UserUpsert) UpdateEducationInfo() *UserUpsert {
	u.SetExcluded(user.FieldEducationInfo)
	return u
}

// SetPhone sets the "phone" field.
func (u *UserUpsert) SetPhone(v string) *UserUpsert {
	u.Set(user.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhone() *UserUpsert {
	u.SetExcluded(user.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsert) ClearPhone() *UserUpsert {
	u.SetNull(user.FieldPhone)
	return u
}

// SetTelegram sets the "telegram" field.
func (u *UserUpsert) SetTelegram(v string) *UserUpsert {
	u.Set(user.FieldTelegram, v)
	return u
}

// UpdateTelegram sets the "telegram" field to the value that was provided on create.
func (u *UserUpsert) UpdateTelegram() *UserUpsert {
	u.SetExcluded(user.FieldTelegram)
	return u
}

// ClearTelegram clears the value of the "telegram" field.
func (u *UserUpsert) ClearTelegram() *UserUpsert {
	u.SetNull(user.FieldTelegram)
	return u
}

// SetOtherContacts sets the "other_contacts" field.
func (u *UserUpsert) SetOtherContacts(v string) *UserUpsert {
	u.Set(user.FieldOtherContacts, v)
	return u
}

// UpdateOtherContacts sets the "other_contacts" field to the value that was provided on create.
func (u *UserUpsert) UpdateOtherContacts() *UserUpsert {
	u.SetExcluded(user.FieldOtherContacts)
	return u
}

// ClearOtherContacts clears the value of the "other_contacts" field.
func (u *UserUpsert) ClearOtherContacts() *UserUpsert {
	u.SetNull(user.FieldOtherContacts)
	return u
}

// SetType sets the "type" field.
func (u *UserUpsert) SetType(v valueobject.UserType) *UserUpsert {
	u.Set(user.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsert) UpdateType() *UserUpsert {
	u.SetExcluded(user.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetLogin sets the "login" field.
func (u *UserUpsertOne) SetLogin(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLogin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLogin()
	})
}

// SetHashedPassword sets the "hashed_password" field.
func (u *UserUpsertOne) SetHashedPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHashedPassword(v)
	})
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHashedPassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashedPassword()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v valueobject.Email) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertOne) SetBio(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBio() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// SetEducationInfo sets the "education_info" field.
func (u *UserUpsertOne) SetEducationInfo(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEducationInfo(v)
	})
}

// UpdateEducationInfo sets the "education_info" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEducationInfo() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEducationInfo()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertOne) SetPhone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsertOne) ClearPhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhone()
	})
}

// SetTelegram sets the "telegram" field.
func (u *UserUpsertOne) SetTelegram(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTelegram(v)
	})
}

// UpdateTelegram sets the "telegram" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTelegram() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTelegram()
	})
}

// ClearTelegram clears the value of the "telegram" field.
func (u *UserUpsertOne) ClearTelegram() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearTelegram()
	})
}

// SetOtherContacts sets the "other_contacts" field.
func (u *UserUpsertOne) SetOtherContacts(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOtherContacts(v)
	})
}

// UpdateOtherContacts sets the "other_contacts" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOtherContacts() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOtherContacts()
	})
}

// ClearOtherContacts clears the value of the "other_contacts" field.
func (u *UserUpsertOne) ClearOtherContacts() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOtherContacts()
	})
}

// SetType sets the "type" field.
func (u *UserUpsertOne) SetType(v valueobject.UserType) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetLogin(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetLogin sets the "login" field.
func (u *UserUpsertBulk) SetLogin(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLogin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLogin()
	})
}

// SetHashedPassword sets the "hashed_password" field.
func (u *UserUpsertBulk) SetHashedPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHashedPassword(v)
	})
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHashedPassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashedPassword()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v valueobject.Email) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetBio sets the "bio" field.
func (u *UserUpsertBulk) SetBio(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBio() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBio()
	})
}

// SetEducationInfo sets the "education_info" field.
func (u *UserUpsertBulk) SetEducationInfo(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEducationInfo(v)
	})
}

// UpdateEducationInfo sets the "education_info" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEducationInfo() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEducationInfo()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertBulk) SetPhone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsertBulk) ClearPhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhone()
	})
}

// SetTelegram sets the "telegram" field.
func (u *UserUpsertBulk) SetTelegram(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTelegram(v)
	})
}

// UpdateTelegram sets the "telegram" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTelegram() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTelegram()
	})
}

// ClearTelegram clears the value of the "telegram" field.
func (u *UserUpsertBulk) ClearTelegram() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearTelegram()
	})
}

// SetOtherContacts sets the "other_contacts" field.
func (u *UserUpsertBulk) SetOtherContacts(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOtherContacts(v)
	})
}

// UpdateOtherContacts sets the "other_contacts" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOtherContacts() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOtherContacts()
	})
}

// ClearOtherContacts clears the value of the "other_contacts" field.
func (u *UserUpsertBulk) ClearOtherContacts() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOtherContacts()
	})
}

// SetType sets the "type" field.
func (u *UserUpsertBulk) SetType(v valueobject.UserType) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
