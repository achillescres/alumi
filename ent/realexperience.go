// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itamconnect/ent/realexperience"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RealExperience is the model entity for the RealExperience schema.
type RealExperience struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Where holds the value of the "where" field.
	Where string `json:"where,omitempty"`
	// As holds the value of the "as" field.
	As string `json:"as,omitempty"`
	// How holds the value of the "how" field.
	How string `json:"how,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// WhenStarted holds the value of the "when_started" field.
	WhenStarted time.Time `json:"when_started,omitempty"`
	// WhenEnded holds the value of the "when_ended" field.
	WhenEnded             time.Time `json:"when_ended,omitempty"`
	user_real_experiences *int
	selectValues          sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RealExperience) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case realexperience.FieldID:
			values[i] = new(sql.NullInt64)
		case realexperience.FieldWhere, realexperience.FieldAs, realexperience.FieldHow, realexperience.FieldDescription:
			values[i] = new(sql.NullString)
		case realexperience.FieldWhenStarted, realexperience.FieldWhenEnded:
			values[i] = new(sql.NullTime)
		case realexperience.ForeignKeys[0]: // user_real_experiences
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RealExperience fields.
func (re *RealExperience) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case realexperience.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			re.ID = int(value.Int64)
		case realexperience.FieldWhere:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field where", values[i])
			} else if value.Valid {
				re.Where = value.String
			}
		case realexperience.FieldAs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field as", values[i])
			} else if value.Valid {
				re.As = value.String
			}
		case realexperience.FieldHow:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field how", values[i])
			} else if value.Valid {
				re.How = value.String
			}
		case realexperience.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				re.Description = value.String
			}
		case realexperience.FieldWhenStarted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field when_started", values[i])
			} else if value.Valid {
				re.WhenStarted = value.Time
			}
		case realexperience.FieldWhenEnded:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field when_ended", values[i])
			} else if value.Valid {
				re.WhenEnded = value.Time
			}
		case realexperience.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_real_experiences", value)
			} else if value.Valid {
				re.user_real_experiences = new(int)
				*re.user_real_experiences = int(value.Int64)
			}
		default:
			re.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RealExperience.
// This includes values selected through modifiers, order, etc.
func (re *RealExperience) Value(name string) (ent.Value, error) {
	return re.selectValues.Get(name)
}

// Update returns a builder for updating this RealExperience.
// Note that you need to call RealExperience.Unwrap() before calling this method if this RealExperience
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *RealExperience) Update() *RealExperienceUpdateOne {
	return NewRealExperienceClient(re.config).UpdateOne(re)
}

// Unwrap unwraps the RealExperience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (re *RealExperience) Unwrap() *RealExperience {
	_tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("ent: RealExperience is not a transactional entity")
	}
	re.config.driver = _tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *RealExperience) String() string {
	var builder strings.Builder
	builder.WriteString("RealExperience(")
	builder.WriteString(fmt.Sprintf("id=%v, ", re.ID))
	builder.WriteString("where=")
	builder.WriteString(re.Where)
	builder.WriteString(", ")
	builder.WriteString("as=")
	builder.WriteString(re.As)
	builder.WriteString(", ")
	builder.WriteString("how=")
	builder.WriteString(re.How)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(re.Description)
	builder.WriteString(", ")
	builder.WriteString("when_started=")
	builder.WriteString(re.WhenStarted.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("when_ended=")
	builder.WriteString(re.WhenEnded.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RealExperiences is a parsable slice of RealExperience.
type RealExperiences []*RealExperience
