// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/user"
	"itamconnect/internal/domain/valueobject"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Login holds the value of the "login" field.
	Login string `json:"login,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"hashed_password,omitempty"`
	// Email holds the value of the "email" field.
	Email valueobject.Email `json:"email,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// EducationInfo holds the value of the "education_info" field.
	EducationInfo string `json:"education_info,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Telegram holds the value of the "telegram" field.
	Telegram string `json:"telegram,omitempty"`
	// OtherContacts holds the value of the "other_contacts" field.
	OtherContacts string `json:"other_contacts,omitempty"`
	// Type holds the value of the "type" field.
	Type valueobject.UserType `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	user_menti   *int
	user_mentor  *int
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// RealExperiences holds the value of the real_experiences edge.
	RealExperiences []*RealExperience `json:"real_experiences,omitempty"`
	// Menti holds the value of the menti edge.
	Menti *Menti `json:"menti,omitempty"`
	// Mentor holds the value of the mentor edge.
	Mentor *Mentor `json:"mentor,omitempty"`
	// Skills holds the value of the skills edge.
	Skills []*Skill `json:"skills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RealExperiencesOrErr returns the RealExperiences value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RealExperiencesOrErr() ([]*RealExperience, error) {
	if e.loadedTypes[0] {
		return e.RealExperiences, nil
	}
	return nil, &NotLoadedError{edge: "real_experiences"}
}

// MentiOrErr returns the Menti value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) MentiOrErr() (*Menti, error) {
	if e.Menti != nil {
		return e.Menti, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: menti.Label}
	}
	return nil, &NotLoadedError{edge: "menti"}
}

// MentorOrErr returns the Mentor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) MentorOrErr() (*Mentor, error) {
	if e.Mentor != nil {
		return e.Mentor, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: mentor.Label}
	}
	return nil, &NotLoadedError{edge: "mentor"}
}

// SkillsOrErr returns the Skills value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SkillsOrErr() ([]*Skill, error) {
	if e.loadedTypes[3] {
		return e.Skills, nil
	}
	return nil, &NotLoadedError{edge: "skills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldLogin, user.FieldHashedPassword, user.FieldEmail, user.FieldBio, user.FieldEducationInfo, user.FieldPhone, user.FieldTelegram, user.FieldOtherContacts, user.FieldType:
			values[i] = new(sql.NullString)
		case user.ForeignKeys[0]: // user_menti
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[1]: // user_mentor
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login", values[i])
			} else if value.Valid {
				u.Login = value.String
			}
		case user.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				u.HashedPassword = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = valueobject.Email(value.String)
			}
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				u.Bio = value.String
			}
		case user.FieldEducationInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field education_info", values[i])
			} else if value.Valid {
				u.EducationInfo = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldTelegram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telegram", values[i])
			} else if value.Valid {
				u.Telegram = value.String
			}
		case user.FieldOtherContacts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_contacts", values[i])
			} else if value.Valid {
				u.OtherContacts = value.String
			}
		case user.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				u.Type = valueobject.UserType(value.String)
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_menti", value)
			} else if value.Valid {
				u.user_menti = new(int)
				*u.user_menti = int(value.Int64)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_mentor", value)
			} else if value.Valid {
				u.user_mentor = new(int)
				*u.user_mentor = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryRealExperiences queries the "real_experiences" edge of the User entity.
func (u *User) QueryRealExperiences() *RealExperienceQuery {
	return NewUserClient(u.config).QueryRealExperiences(u)
}

// QueryMenti queries the "menti" edge of the User entity.
func (u *User) QueryMenti() *MentiQuery {
	return NewUserClient(u.config).QueryMenti(u)
}

// QueryMentor queries the "mentor" edge of the User entity.
func (u *User) QueryMentor() *MentorQuery {
	return NewUserClient(u.config).QueryMentor(u)
}

// QuerySkills queries the "skills" edge of the User entity.
func (u *User) QuerySkills() *SkillQuery {
	return NewUserClient(u.config).QuerySkills(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("login=")
	builder.WriteString(u.Login)
	builder.WriteString(", ")
	builder.WriteString("hashed_password=")
	builder.WriteString(u.HashedPassword)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(fmt.Sprintf("%v", u.Email))
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(u.Bio)
	builder.WriteString(", ")
	builder.WriteString("education_info=")
	builder.WriteString(u.EducationInfo)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("telegram=")
	builder.WriteString(u.Telegram)
	builder.WriteString(", ")
	builder.WriteString("other_contacts=")
	builder.WriteString(u.OtherContacts)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", u.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
