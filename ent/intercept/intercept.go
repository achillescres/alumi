// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"
	"itamconnect/ent"
	"itamconnect/ent/match"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/message"
	"itamconnect/ent/predicate"
	"itamconnect/ent/realexperience"
	"itamconnect/ent/roadmap"
	"itamconnect/ent/skill"
	"itamconnect/ent/user"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The MatchFunc type is an adapter to allow the use of ordinary function as a Querier.
type MatchFunc func(context.Context, *ent.MatchQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MatchFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MatchQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MatchQuery", q)
}

// The TraverseMatch type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMatch func(context.Context, *ent.MatchQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMatch) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMatch) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MatchQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MatchQuery", q)
}

// The MentiFunc type is an adapter to allow the use of ordinary function as a Querier.
type MentiFunc func(context.Context, *ent.MentiQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MentiFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MentiQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MentiQuery", q)
}

// The TraverseMenti type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMenti func(context.Context, *ent.MentiQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMenti) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMenti) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MentiQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MentiQuery", q)
}

// The MentorFunc type is an adapter to allow the use of ordinary function as a Querier.
type MentorFunc func(context.Context, *ent.MentorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MentorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MentorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MentorQuery", q)
}

// The TraverseMentor type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMentor func(context.Context, *ent.MentorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMentor) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMentor) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MentorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MentorQuery", q)
}

// The MessageFunc type is an adapter to allow the use of ordinary function as a Querier.
type MessageFunc func(context.Context, *ent.MessageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MessageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MessageQuery", q)
}

// The TraverseMessage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMessage func(context.Context, *ent.MessageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMessage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMessage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MessageQuery", q)
}

// The RealExperienceFunc type is an adapter to allow the use of ordinary function as a Querier.
type RealExperienceFunc func(context.Context, *ent.RealExperienceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RealExperienceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RealExperienceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RealExperienceQuery", q)
}

// The TraverseRealExperience type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRealExperience func(context.Context, *ent.RealExperienceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRealExperience) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRealExperience) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RealExperienceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RealExperienceQuery", q)
}

// The RoadMapFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoadMapFunc func(context.Context, *ent.RoadMapQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoadMapFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoadMapQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoadMapQuery", q)
}

// The TraverseRoadMap type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRoadMap func(context.Context, *ent.RoadMapQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRoadMap) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRoadMap) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoadMapQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoadMapQuery", q)
}

// The SkillFunc type is an adapter to allow the use of ordinary function as a Querier.
type SkillFunc func(context.Context, *ent.SkillQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SkillFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SkillQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SkillQuery", q)
}

// The TraverseSkill type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSkill func(context.Context, *ent.SkillQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSkill) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSkill) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SkillQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SkillQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.MatchQuery:
		return &query[*ent.MatchQuery, predicate.Match, match.OrderOption]{typ: ent.TypeMatch, tq: q}, nil
	case *ent.MentiQuery:
		return &query[*ent.MentiQuery, predicate.Menti, menti.OrderOption]{typ: ent.TypeMenti, tq: q}, nil
	case *ent.MentorQuery:
		return &query[*ent.MentorQuery, predicate.Mentor, mentor.OrderOption]{typ: ent.TypeMentor, tq: q}, nil
	case *ent.MessageQuery:
		return &query[*ent.MessageQuery, predicate.Message, message.OrderOption]{typ: ent.TypeMessage, tq: q}, nil
	case *ent.RealExperienceQuery:
		return &query[*ent.RealExperienceQuery, predicate.RealExperience, realexperience.OrderOption]{typ: ent.TypeRealExperience, tq: q}, nil
	case *ent.RoadMapQuery:
		return &query[*ent.RoadMapQuery, predicate.RoadMap, roadmap.OrderOption]{typ: ent.TypeRoadMap, tq: q}, nil
	case *ent.SkillQuery:
		return &query[*ent.SkillQuery, predicate.Skill, skill.OrderOption]{typ: ent.TypeSkill, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
