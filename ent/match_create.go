// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/match"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/message"
	"itamconnect/internal/domain/valueobject"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchCreate is the builder for creating a Match entity.
type MatchCreate struct {
	config
	mutation *MatchMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (mc *MatchCreate) SetStatus(vs valueobject.MatchStatus) *MatchCreate {
	mc.mutation.SetStatus(vs)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MatchCreate) SetCreatedAt(t time.Time) *MatchCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MatchCreate) SetNillableCreatedAt(t *time.Time) *MatchCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetMentorID sets the "mentor_id" field.
func (mc *MatchCreate) SetMentorID(i int) *MatchCreate {
	mc.mutation.SetMentorID(i)
	return mc
}

// SetMentiID sets the "menti_id" field.
func (mc *MatchCreate) SetMentiID(i int) *MatchCreate {
	mc.mutation.SetMentiID(i)
	return mc
}

// SetMentor sets the "mentor" edge to the Mentor entity.
func (mc *MatchCreate) SetMentor(m *Mentor) *MatchCreate {
	return mc.SetMentorID(m.ID)
}

// SetMenti sets the "menti" edge to the Menti entity.
func (mc *MatchCreate) SetMenti(m *Menti) *MatchCreate {
	return mc.SetMentiID(m.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (mc *MatchCreate) AddMessageIDs(ids ...int) *MatchCreate {
	mc.mutation.AddMessageIDs(ids...)
	return mc
}

// AddMessages adds the "messages" edges to the Message entity.
func (mc *MatchCreate) AddMessages(m ...*Message) *MatchCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMessageIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mc *MatchCreate) Mutation() *MatchMutation {
	return mc.mutation
}

// Save creates the Match in the database.
func (mc *MatchCreate) Save(ctx context.Context) (*Match, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MatchCreate) SaveX(ctx context.Context) *Match {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MatchCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MatchCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MatchCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := match.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MatchCreate) check() error {
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Match.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := match.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Match.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Match.created_at"`)}
	}
	if _, ok := mc.mutation.MentorID(); !ok {
		return &ValidationError{Name: "mentor_id", err: errors.New(`ent: missing required field "Match.mentor_id"`)}
	}
	if _, ok := mc.mutation.MentiID(); !ok {
		return &ValidationError{Name: "menti_id", err: errors.New(`ent: missing required field "Match.menti_id"`)}
	}
	if _, ok := mc.mutation.MentorID(); !ok {
		return &ValidationError{Name: "mentor", err: errors.New(`ent: missing required edge "Match.mentor"`)}
	}
	if _, ok := mc.mutation.MentiID(); !ok {
		return &ValidationError{Name: "menti", err: errors.New(`ent: missing required edge "Match.menti"`)}
	}
	return nil
}

func (mc *MatchCreate) sqlSave(ctx context.Context) (*Match, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MatchCreate) createSpec() (*Match, *sqlgraph.CreateSpec) {
	var (
		_node = &Match{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(match.Table, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	)
	_spec.Schema = mc.schemaConfig.Match
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mc.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentorTable,
			Columns: []string{match.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mc.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MentorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MentiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   match.MentiTable,
			Columns: []string{match.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mc.schemaConfig.Match
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MentiID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   match.MessagesTable,
			Columns: []string{match.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		edge.Schema = mc.schemaConfig.Message
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Match.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MatchUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (mc *MatchCreate) OnConflict(opts ...sql.ConflictOption) *MatchUpsertOne {
	mc.conflict = opts
	return &MatchUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Match.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MatchCreate) OnConflictColumns(columns ...string) *MatchUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MatchUpsertOne{
		create: mc,
	}
}

type (
	// MatchUpsertOne is the builder for "upsert"-ing
	//  one Match node.
	MatchUpsertOne struct {
		create *MatchCreate
	}

	// MatchUpsert is the "OnConflict" setter.
	MatchUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *MatchUpsert) SetStatus(v valueobject.MatchStatus) *MatchUpsert {
	u.Set(match.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MatchUpsert) UpdateStatus() *MatchUpsert {
	u.SetExcluded(match.FieldStatus)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MatchUpsert) SetCreatedAt(v time.Time) *MatchUpsert {
	u.Set(match.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MatchUpsert) UpdateCreatedAt() *MatchUpsert {
	u.SetExcluded(match.FieldCreatedAt)
	return u
}

// SetMentorID sets the "mentor_id" field.
func (u *MatchUpsert) SetMentorID(v int) *MatchUpsert {
	u.Set(match.FieldMentorID, v)
	return u
}

// UpdateMentorID sets the "mentor_id" field to the value that was provided on create.
func (u *MatchUpsert) UpdateMentorID() *MatchUpsert {
	u.SetExcluded(match.FieldMentorID)
	return u
}

// SetMentiID sets the "menti_id" field.
func (u *MatchUpsert) SetMentiID(v int) *MatchUpsert {
	u.Set(match.FieldMentiID, v)
	return u
}

// UpdateMentiID sets the "menti_id" field to the value that was provided on create.
func (u *MatchUpsert) UpdateMentiID() *MatchUpsert {
	u.SetExcluded(match.FieldMentiID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Match.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MatchUpsertOne) UpdateNewValues() *MatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Match.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MatchUpsertOne) Ignore() *MatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MatchUpsertOne) DoNothing() *MatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MatchCreate.OnConflict
// documentation for more info.
func (u *MatchUpsertOne) Update(set func(*MatchUpsert)) *MatchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MatchUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MatchUpsertOne) SetStatus(v valueobject.MatchStatus) *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MatchUpsertOne) UpdateStatus() *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MatchUpsertOne) SetCreatedAt(v time.Time) *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MatchUpsertOne) UpdateCreatedAt() *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMentorID sets the "mentor_id" field.
func (u *MatchUpsertOne) SetMentorID(v int) *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.SetMentorID(v)
	})
}

// UpdateMentorID sets the "mentor_id" field to the value that was provided on create.
func (u *MatchUpsertOne) UpdateMentorID() *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateMentorID()
	})
}

// SetMentiID sets the "menti_id" field.
func (u *MatchUpsertOne) SetMentiID(v int) *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.SetMentiID(v)
	})
}

// UpdateMentiID sets the "menti_id" field to the value that was provided on create.
func (u *MatchUpsertOne) UpdateMentiID() *MatchUpsertOne {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateMentiID()
	})
}

// Exec executes the query.
func (u *MatchUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MatchCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MatchUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MatchUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MatchUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MatchCreateBulk is the builder for creating many Match entities in bulk.
type MatchCreateBulk struct {
	config
	err      error
	builders []*MatchCreate
	conflict []sql.ConflictOption
}

// Save creates the Match entities in the database.
func (mcb *MatchCreateBulk) Save(ctx context.Context) ([]*Match, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Match, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MatchCreateBulk) SaveX(ctx context.Context) []*Match {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MatchCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MatchCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Match.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MatchUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (mcb *MatchCreateBulk) OnConflict(opts ...sql.ConflictOption) *MatchUpsertBulk {
	mcb.conflict = opts
	return &MatchUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Match.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MatchCreateBulk) OnConflictColumns(columns ...string) *MatchUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MatchUpsertBulk{
		create: mcb,
	}
}

// MatchUpsertBulk is the builder for "upsert"-ing
// a bulk of Match nodes.
type MatchUpsertBulk struct {
	create *MatchCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Match.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MatchUpsertBulk) UpdateNewValues() *MatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Match.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MatchUpsertBulk) Ignore() *MatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MatchUpsertBulk) DoNothing() *MatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MatchCreateBulk.OnConflict
// documentation for more info.
func (u *MatchUpsertBulk) Update(set func(*MatchUpsert)) *MatchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MatchUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MatchUpsertBulk) SetStatus(v valueobject.MatchStatus) *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MatchUpsertBulk) UpdateStatus() *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MatchUpsertBulk) SetCreatedAt(v time.Time) *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MatchUpsertBulk) UpdateCreatedAt() *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetMentorID sets the "mentor_id" field.
func (u *MatchUpsertBulk) SetMentorID(v int) *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.SetMentorID(v)
	})
}

// UpdateMentorID sets the "mentor_id" field to the value that was provided on create.
func (u *MatchUpsertBulk) UpdateMentorID() *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateMentorID()
	})
}

// SetMentiID sets the "menti_id" field.
func (u *MatchUpsertBulk) SetMentiID(v int) *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.SetMentiID(v)
	})
}

// UpdateMentiID sets the "menti_id" field to the value that was provided on create.
func (u *MatchUpsertBulk) UpdateMentiID() *MatchUpsertBulk {
	return u.Update(func(s *MatchUpsert) {
		s.UpdateMentiID()
	})
}

// Exec executes the query.
func (u *MatchUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MatchCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MatchCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MatchUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
