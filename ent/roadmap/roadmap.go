// Code generated by ent, DO NOT EDIT.

package roadmap

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the roadmap type in the database.
	Label = "road_map"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// Table holds the table name of the roadmap in the database.
	Table = "road_maps"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "road_maps"
	// AuthorInverseTable is the table name for the Mentor entity.
	// It exists in this package in order to avoid circular dependency with the "mentor" package.
	AuthorInverseTable = "mentors"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "road_map_author"
)

// Columns holds all SQL columns for roadmap fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTags,
	FieldText,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "road_maps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"road_map_author",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the RoadMap queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AuthorTable, AuthorColumn),
	)
}
