// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/internal"
	"itamconnect/ent/predicate"
	"itamconnect/ent/realexperience"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RealExperienceUpdate is the builder for updating RealExperience entities.
type RealExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *RealExperienceMutation
}

// Where appends a list predicates to the RealExperienceUpdate builder.
func (reu *RealExperienceUpdate) Where(ps ...predicate.RealExperience) *RealExperienceUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetWhere sets the "where" field.
func (reu *RealExperienceUpdate) SetWhere(s string) *RealExperienceUpdate {
	reu.mutation.SetWhere(s)
	return reu
}

// SetNillableWhere sets the "where" field if the given value is not nil.
func (reu *RealExperienceUpdate) SetNillableWhere(s *string) *RealExperienceUpdate {
	if s != nil {
		reu.SetWhere(*s)
	}
	return reu
}

// SetAs sets the "as" field.
func (reu *RealExperienceUpdate) SetAs(s string) *RealExperienceUpdate {
	reu.mutation.SetAs(s)
	return reu
}

// SetNillableAs sets the "as" field if the given value is not nil.
func (reu *RealExperienceUpdate) SetNillableAs(s *string) *RealExperienceUpdate {
	if s != nil {
		reu.SetAs(*s)
	}
	return reu
}

// SetHow sets the "how" field.
func (reu *RealExperienceUpdate) SetHow(s string) *RealExperienceUpdate {
	reu.mutation.SetHow(s)
	return reu
}

// SetNillableHow sets the "how" field if the given value is not nil.
func (reu *RealExperienceUpdate) SetNillableHow(s *string) *RealExperienceUpdate {
	if s != nil {
		reu.SetHow(*s)
	}
	return reu
}

// SetDescription sets the "description" field.
func (reu *RealExperienceUpdate) SetDescription(s string) *RealExperienceUpdate {
	reu.mutation.SetDescription(s)
	return reu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (reu *RealExperienceUpdate) SetNillableDescription(s *string) *RealExperienceUpdate {
	if s != nil {
		reu.SetDescription(*s)
	}
	return reu
}

// SetWhenStarted sets the "when_started" field.
func (reu *RealExperienceUpdate) SetWhenStarted(t time.Time) *RealExperienceUpdate {
	reu.mutation.SetWhenStarted(t)
	return reu
}

// SetNillableWhenStarted sets the "when_started" field if the given value is not nil.
func (reu *RealExperienceUpdate) SetNillableWhenStarted(t *time.Time) *RealExperienceUpdate {
	if t != nil {
		reu.SetWhenStarted(*t)
	}
	return reu
}

// ClearWhenStarted clears the value of the "when_started" field.
func (reu *RealExperienceUpdate) ClearWhenStarted() *RealExperienceUpdate {
	reu.mutation.ClearWhenStarted()
	return reu
}

// SetWhenEnded sets the "when_ended" field.
func (reu *RealExperienceUpdate) SetWhenEnded(t time.Time) *RealExperienceUpdate {
	reu.mutation.SetWhenEnded(t)
	return reu
}

// SetNillableWhenEnded sets the "when_ended" field if the given value is not nil.
func (reu *RealExperienceUpdate) SetNillableWhenEnded(t *time.Time) *RealExperienceUpdate {
	if t != nil {
		reu.SetWhenEnded(*t)
	}
	return reu
}

// ClearWhenEnded clears the value of the "when_ended" field.
func (reu *RealExperienceUpdate) ClearWhenEnded() *RealExperienceUpdate {
	reu.mutation.ClearWhenEnded()
	return reu
}

// Mutation returns the RealExperienceMutation object of the builder.
func (reu *RealExperienceUpdate) Mutation() *RealExperienceMutation {
	return reu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *RealExperienceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *RealExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *RealExperienceUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *RealExperienceUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (reu *RealExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(realexperience.Table, realexperience.Columns, sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt))
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reu.mutation.GetWhere(); ok {
		_spec.SetField(realexperience.FieldWhere, field.TypeString, value)
	}
	if value, ok := reu.mutation.As(); ok {
		_spec.SetField(realexperience.FieldAs, field.TypeString, value)
	}
	if value, ok := reu.mutation.How(); ok {
		_spec.SetField(realexperience.FieldHow, field.TypeString, value)
	}
	if value, ok := reu.mutation.Description(); ok {
		_spec.SetField(realexperience.FieldDescription, field.TypeString, value)
	}
	if value, ok := reu.mutation.WhenStarted(); ok {
		_spec.SetField(realexperience.FieldWhenStarted, field.TypeTime, value)
	}
	if reu.mutation.WhenStartedCleared() {
		_spec.ClearField(realexperience.FieldWhenStarted, field.TypeTime)
	}
	if value, ok := reu.mutation.WhenEnded(); ok {
		_spec.SetField(realexperience.FieldWhenEnded, field.TypeTime, value)
	}
	if reu.mutation.WhenEndedCleared() {
		_spec.ClearField(realexperience.FieldWhenEnded, field.TypeTime)
	}
	_spec.Node.Schema = reu.schemaConfig.RealExperience
	ctx = internal.NewSchemaConfigContext(ctx, reu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{realexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// RealExperienceUpdateOne is the builder for updating a single RealExperience entity.
type RealExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RealExperienceMutation
}

// SetWhere sets the "where" field.
func (reuo *RealExperienceUpdateOne) SetWhere(s string) *RealExperienceUpdateOne {
	reuo.mutation.SetWhere(s)
	return reuo
}

// SetNillableWhere sets the "where" field if the given value is not nil.
func (reuo *RealExperienceUpdateOne) SetNillableWhere(s *string) *RealExperienceUpdateOne {
	if s != nil {
		reuo.SetWhere(*s)
	}
	return reuo
}

// SetAs sets the "as" field.
func (reuo *RealExperienceUpdateOne) SetAs(s string) *RealExperienceUpdateOne {
	reuo.mutation.SetAs(s)
	return reuo
}

// SetNillableAs sets the "as" field if the given value is not nil.
func (reuo *RealExperienceUpdateOne) SetNillableAs(s *string) *RealExperienceUpdateOne {
	if s != nil {
		reuo.SetAs(*s)
	}
	return reuo
}

// SetHow sets the "how" field.
func (reuo *RealExperienceUpdateOne) SetHow(s string) *RealExperienceUpdateOne {
	reuo.mutation.SetHow(s)
	return reuo
}

// SetNillableHow sets the "how" field if the given value is not nil.
func (reuo *RealExperienceUpdateOne) SetNillableHow(s *string) *RealExperienceUpdateOne {
	if s != nil {
		reuo.SetHow(*s)
	}
	return reuo
}

// SetDescription sets the "description" field.
func (reuo *RealExperienceUpdateOne) SetDescription(s string) *RealExperienceUpdateOne {
	reuo.mutation.SetDescription(s)
	return reuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (reuo *RealExperienceUpdateOne) SetNillableDescription(s *string) *RealExperienceUpdateOne {
	if s != nil {
		reuo.SetDescription(*s)
	}
	return reuo
}

// SetWhenStarted sets the "when_started" field.
func (reuo *RealExperienceUpdateOne) SetWhenStarted(t time.Time) *RealExperienceUpdateOne {
	reuo.mutation.SetWhenStarted(t)
	return reuo
}

// SetNillableWhenStarted sets the "when_started" field if the given value is not nil.
func (reuo *RealExperienceUpdateOne) SetNillableWhenStarted(t *time.Time) *RealExperienceUpdateOne {
	if t != nil {
		reuo.SetWhenStarted(*t)
	}
	return reuo
}

// ClearWhenStarted clears the value of the "when_started" field.
func (reuo *RealExperienceUpdateOne) ClearWhenStarted() *RealExperienceUpdateOne {
	reuo.mutation.ClearWhenStarted()
	return reuo
}

// SetWhenEnded sets the "when_ended" field.
func (reuo *RealExperienceUpdateOne) SetWhenEnded(t time.Time) *RealExperienceUpdateOne {
	reuo.mutation.SetWhenEnded(t)
	return reuo
}

// SetNillableWhenEnded sets the "when_ended" field if the given value is not nil.
func (reuo *RealExperienceUpdateOne) SetNillableWhenEnded(t *time.Time) *RealExperienceUpdateOne {
	if t != nil {
		reuo.SetWhenEnded(*t)
	}
	return reuo
}

// ClearWhenEnded clears the value of the "when_ended" field.
func (reuo *RealExperienceUpdateOne) ClearWhenEnded() *RealExperienceUpdateOne {
	reuo.mutation.ClearWhenEnded()
	return reuo
}

// Mutation returns the RealExperienceMutation object of the builder.
func (reuo *RealExperienceUpdateOne) Mutation() *RealExperienceMutation {
	return reuo.mutation
}

// Where appends a list predicates to the RealExperienceUpdate builder.
func (reuo *RealExperienceUpdateOne) Where(ps ...predicate.RealExperience) *RealExperienceUpdateOne {
	reuo.mutation.Where(ps...)
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *RealExperienceUpdateOne) Select(field string, fields ...string) *RealExperienceUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated RealExperience entity.
func (reuo *RealExperienceUpdateOne) Save(ctx context.Context) (*RealExperience, error) {
	return withHooks(ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *RealExperienceUpdateOne) SaveX(ctx context.Context) *RealExperience {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *RealExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *RealExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (reuo *RealExperienceUpdateOne) sqlSave(ctx context.Context) (_node *RealExperience, err error) {
	_spec := sqlgraph.NewUpdateSpec(realexperience.Table, realexperience.Columns, sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt))
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RealExperience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, realexperience.FieldID)
		for _, f := range fields {
			if !realexperience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != realexperience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reuo.mutation.GetWhere(); ok {
		_spec.SetField(realexperience.FieldWhere, field.TypeString, value)
	}
	if value, ok := reuo.mutation.As(); ok {
		_spec.SetField(realexperience.FieldAs, field.TypeString, value)
	}
	if value, ok := reuo.mutation.How(); ok {
		_spec.SetField(realexperience.FieldHow, field.TypeString, value)
	}
	if value, ok := reuo.mutation.Description(); ok {
		_spec.SetField(realexperience.FieldDescription, field.TypeString, value)
	}
	if value, ok := reuo.mutation.WhenStarted(); ok {
		_spec.SetField(realexperience.FieldWhenStarted, field.TypeTime, value)
	}
	if reuo.mutation.WhenStartedCleared() {
		_spec.ClearField(realexperience.FieldWhenStarted, field.TypeTime)
	}
	if value, ok := reuo.mutation.WhenEnded(); ok {
		_spec.SetField(realexperience.FieldWhenEnded, field.TypeTime, value)
	}
	if reuo.mutation.WhenEndedCleared() {
		_spec.ClearField(realexperience.FieldWhenEnded, field.TypeTime)
	}
	_spec.Node.Schema = reuo.schemaConfig.RealExperience
	ctx = internal.NewSchemaConfigContext(ctx, reuo.schemaConfig)
	_node = &RealExperience{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{realexperience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}
