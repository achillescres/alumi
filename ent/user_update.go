// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/internal"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/predicate"
	"itamconnect/ent/realexperience"
	"itamconnect/ent/skill"
	"itamconnect/ent/user"
	"itamconnect/internal/domain/valueobject"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetLogin sets the "login" field.
func (uu *UserUpdate) SetLogin(s string) *UserUpdate {
	uu.mutation.SetLogin(s)
	return uu
}

// SetNillableLogin sets the "login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLogin(s *string) *UserUpdate {
	if s != nil {
		uu.SetLogin(*s)
	}
	return uu
}

// SetHashedPassword sets the "hashed_password" field.
func (uu *UserUpdate) SetHashedPassword(s string) *UserUpdate {
	uu.mutation.SetHashedPassword(s)
	return uu
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHashedPassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetHashedPassword(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(v valueobject.Email) *UserUpdate {
	uu.mutation.SetEmail(v)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(v *valueobject.Email) *UserUpdate {
	if v != nil {
		uu.SetEmail(*v)
	}
	return uu
}

// SetBio sets the "bio" field.
func (uu *UserUpdate) SetBio(s string) *UserUpdate {
	uu.mutation.SetBio(s)
	return uu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBio(s *string) *UserUpdate {
	if s != nil {
		uu.SetBio(*s)
	}
	return uu
}

// SetEducationInfo sets the "education_info" field.
func (uu *UserUpdate) SetEducationInfo(s string) *UserUpdate {
	uu.mutation.SetEducationInfo(s)
	return uu
}

// SetNillableEducationInfo sets the "education_info" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEducationInfo(s *string) *UserUpdate {
	if s != nil {
		uu.SetEducationInfo(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetTelegram sets the "telegram" field.
func (uu *UserUpdate) SetTelegram(s string) *UserUpdate {
	uu.mutation.SetTelegram(s)
	return uu
}

// SetNillableTelegram sets the "telegram" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTelegram(s *string) *UserUpdate {
	if s != nil {
		uu.SetTelegram(*s)
	}
	return uu
}

// ClearTelegram clears the value of the "telegram" field.
func (uu *UserUpdate) ClearTelegram() *UserUpdate {
	uu.mutation.ClearTelegram()
	return uu
}

// SetOtherContacts sets the "other_contacts" field.
func (uu *UserUpdate) SetOtherContacts(s string) *UserUpdate {
	uu.mutation.SetOtherContacts(s)
	return uu
}

// SetNillableOtherContacts sets the "other_contacts" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOtherContacts(s *string) *UserUpdate {
	if s != nil {
		uu.SetOtherContacts(*s)
	}
	return uu
}

// ClearOtherContacts clears the value of the "other_contacts" field.
func (uu *UserUpdate) ClearOtherContacts() *UserUpdate {
	uu.mutation.ClearOtherContacts()
	return uu
}

// SetType sets the "type" field.
func (uu *UserUpdate) SetType(vt valueobject.UserType) *UserUpdate {
	uu.mutation.SetType(vt)
	return uu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableType(vt *valueobject.UserType) *UserUpdate {
	if vt != nil {
		uu.SetType(*vt)
	}
	return uu
}

// AddRealExperienceIDs adds the "real_experiences" edge to the RealExperience entity by IDs.
func (uu *UserUpdate) AddRealExperienceIDs(ids ...int) *UserUpdate {
	uu.mutation.AddRealExperienceIDs(ids...)
	return uu
}

// AddRealExperiences adds the "real_experiences" edges to the RealExperience entity.
func (uu *UserUpdate) AddRealExperiences(r ...*RealExperience) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRealExperienceIDs(ids...)
}

// SetMentiID sets the "menti" edge to the Menti entity by ID.
func (uu *UserUpdate) SetMentiID(id int) *UserUpdate {
	uu.mutation.SetMentiID(id)
	return uu
}

// SetNillableMentiID sets the "menti" edge to the Menti entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableMentiID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetMentiID(*id)
	}
	return uu
}

// SetMenti sets the "menti" edge to the Menti entity.
func (uu *UserUpdate) SetMenti(m *Menti) *UserUpdate {
	return uu.SetMentiID(m.ID)
}

// SetMentorID sets the "mentor" edge to the Mentor entity by ID.
func (uu *UserUpdate) SetMentorID(id int) *UserUpdate {
	uu.mutation.SetMentorID(id)
	return uu
}

// SetNillableMentorID sets the "mentor" edge to the Mentor entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableMentorID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetMentorID(*id)
	}
	return uu
}

// SetMentor sets the "mentor" edge to the Mentor entity.
func (uu *UserUpdate) SetMentor(m *Mentor) *UserUpdate {
	return uu.SetMentorID(m.ID)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (uu *UserUpdate) AddSkillIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSkillIDs(ids...)
	return uu
}

// AddSkills adds the "skills" edges to the Skill entity.
func (uu *UserUpdate) AddSkills(s ...*Skill) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSkillIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearRealExperiences clears all "real_experiences" edges to the RealExperience entity.
func (uu *UserUpdate) ClearRealExperiences() *UserUpdate {
	uu.mutation.ClearRealExperiences()
	return uu
}

// RemoveRealExperienceIDs removes the "real_experiences" edge to RealExperience entities by IDs.
func (uu *UserUpdate) RemoveRealExperienceIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveRealExperienceIDs(ids...)
	return uu
}

// RemoveRealExperiences removes "real_experiences" edges to RealExperience entities.
func (uu *UserUpdate) RemoveRealExperiences(r ...*RealExperience) *UserUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRealExperienceIDs(ids...)
}

// ClearMenti clears the "menti" edge to the Menti entity.
func (uu *UserUpdate) ClearMenti() *UserUpdate {
	uu.mutation.ClearMenti()
	return uu
}

// ClearMentor clears the "mentor" edge to the Mentor entity.
func (uu *UserUpdate) ClearMentor() *UserUpdate {
	uu.mutation.ClearMentor()
	return uu
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (uu *UserUpdate) ClearSkills() *UserUpdate {
	uu.mutation.ClearSkills()
	return uu
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (uu *UserUpdate) RemoveSkillIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSkillIDs(ids...)
	return uu
}

// RemoveSkills removes "skills" edges to Skill entities.
func (uu *UserUpdate) RemoveSkills(s ...*Skill) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSkillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
	}
	if value, ok := uu.mutation.HashedPassword(); ok {
		_spec.SetField(user.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if value, ok := uu.mutation.EducationInfo(); ok {
		_spec.SetField(user.FieldEducationInfo, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.Telegram(); ok {
		_spec.SetField(user.FieldTelegram, field.TypeString, value)
	}
	if uu.mutation.TelegramCleared() {
		_spec.ClearField(user.FieldTelegram, field.TypeString)
	}
	if value, ok := uu.mutation.OtherContacts(); ok {
		_spec.SetField(user.FieldOtherContacts, field.TypeString, value)
	}
	if uu.mutation.OtherContactsCleared() {
		_spec.ClearField(user.FieldOtherContacts, field.TypeString)
	}
	if value, ok := uu.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeEnum, value)
	}
	if uu.mutation.RealExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RealExperiencesTable,
			Columns: []string{user.RealExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.RealExperience
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRealExperiencesIDs(); len(nodes) > 0 && !uu.mutation.RealExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RealExperiencesTable,
			Columns: []string{user.RealExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.RealExperience
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RealExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RealExperiencesTable,
			Columns: []string{user.RealExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.RealExperience
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MentiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentiTable,
			Columns: []string{user.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MentiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentiTable,
			Columns: []string{user.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentorTable,
			Columns: []string{user.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentorTable,
			Columns: []string{user.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SkillsTable,
			Columns: []string{user.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.Skill
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !uu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SkillsTable,
			Columns: []string{user.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.Skill
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SkillsTable,
			Columns: []string{user.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uu.schemaConfig.Skill
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uu.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetLogin sets the "login" field.
func (uuo *UserUpdateOne) SetLogin(s string) *UserUpdateOne {
	uuo.mutation.SetLogin(s)
	return uuo
}

// SetNillableLogin sets the "login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLogin(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLogin(*s)
	}
	return uuo
}

// SetHashedPassword sets the "hashed_password" field.
func (uuo *UserUpdateOne) SetHashedPassword(s string) *UserUpdateOne {
	uuo.mutation.SetHashedPassword(s)
	return uuo
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHashedPassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHashedPassword(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(v valueobject.Email) *UserUpdateOne {
	uuo.mutation.SetEmail(v)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(v *valueobject.Email) *UserUpdateOne {
	if v != nil {
		uuo.SetEmail(*v)
	}
	return uuo
}

// SetBio sets the "bio" field.
func (uuo *UserUpdateOne) SetBio(s string) *UserUpdateOne {
	uuo.mutation.SetBio(s)
	return uuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBio(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBio(*s)
	}
	return uuo
}

// SetEducationInfo sets the "education_info" field.
func (uuo *UserUpdateOne) SetEducationInfo(s string) *UserUpdateOne {
	uuo.mutation.SetEducationInfo(s)
	return uuo
}

// SetNillableEducationInfo sets the "education_info" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEducationInfo(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEducationInfo(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetTelegram sets the "telegram" field.
func (uuo *UserUpdateOne) SetTelegram(s string) *UserUpdateOne {
	uuo.mutation.SetTelegram(s)
	return uuo
}

// SetNillableTelegram sets the "telegram" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTelegram(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTelegram(*s)
	}
	return uuo
}

// ClearTelegram clears the value of the "telegram" field.
func (uuo *UserUpdateOne) ClearTelegram() *UserUpdateOne {
	uuo.mutation.ClearTelegram()
	return uuo
}

// SetOtherContacts sets the "other_contacts" field.
func (uuo *UserUpdateOne) SetOtherContacts(s string) *UserUpdateOne {
	uuo.mutation.SetOtherContacts(s)
	return uuo
}

// SetNillableOtherContacts sets the "other_contacts" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOtherContacts(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOtherContacts(*s)
	}
	return uuo
}

// ClearOtherContacts clears the value of the "other_contacts" field.
func (uuo *UserUpdateOne) ClearOtherContacts() *UserUpdateOne {
	uuo.mutation.ClearOtherContacts()
	return uuo
}

// SetType sets the "type" field.
func (uuo *UserUpdateOne) SetType(vt valueobject.UserType) *UserUpdateOne {
	uuo.mutation.SetType(vt)
	return uuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableType(vt *valueobject.UserType) *UserUpdateOne {
	if vt != nil {
		uuo.SetType(*vt)
	}
	return uuo
}

// AddRealExperienceIDs adds the "real_experiences" edge to the RealExperience entity by IDs.
func (uuo *UserUpdateOne) AddRealExperienceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddRealExperienceIDs(ids...)
	return uuo
}

// AddRealExperiences adds the "real_experiences" edges to the RealExperience entity.
func (uuo *UserUpdateOne) AddRealExperiences(r ...*RealExperience) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRealExperienceIDs(ids...)
}

// SetMentiID sets the "menti" edge to the Menti entity by ID.
func (uuo *UserUpdateOne) SetMentiID(id int) *UserUpdateOne {
	uuo.mutation.SetMentiID(id)
	return uuo
}

// SetNillableMentiID sets the "menti" edge to the Menti entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMentiID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetMentiID(*id)
	}
	return uuo
}

// SetMenti sets the "menti" edge to the Menti entity.
func (uuo *UserUpdateOne) SetMenti(m *Menti) *UserUpdateOne {
	return uuo.SetMentiID(m.ID)
}

// SetMentorID sets the "mentor" edge to the Mentor entity by ID.
func (uuo *UserUpdateOne) SetMentorID(id int) *UserUpdateOne {
	uuo.mutation.SetMentorID(id)
	return uuo
}

// SetNillableMentorID sets the "mentor" edge to the Mentor entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMentorID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetMentorID(*id)
	}
	return uuo
}

// SetMentor sets the "mentor" edge to the Mentor entity.
func (uuo *UserUpdateOne) SetMentor(m *Mentor) *UserUpdateOne {
	return uuo.SetMentorID(m.ID)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (uuo *UserUpdateOne) AddSkillIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSkillIDs(ids...)
	return uuo
}

// AddSkills adds the "skills" edges to the Skill entity.
func (uuo *UserUpdateOne) AddSkills(s ...*Skill) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSkillIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearRealExperiences clears all "real_experiences" edges to the RealExperience entity.
func (uuo *UserUpdateOne) ClearRealExperiences() *UserUpdateOne {
	uuo.mutation.ClearRealExperiences()
	return uuo
}

// RemoveRealExperienceIDs removes the "real_experiences" edge to RealExperience entities by IDs.
func (uuo *UserUpdateOne) RemoveRealExperienceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveRealExperienceIDs(ids...)
	return uuo
}

// RemoveRealExperiences removes "real_experiences" edges to RealExperience entities.
func (uuo *UserUpdateOne) RemoveRealExperiences(r ...*RealExperience) *UserUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRealExperienceIDs(ids...)
}

// ClearMenti clears the "menti" edge to the Menti entity.
func (uuo *UserUpdateOne) ClearMenti() *UserUpdateOne {
	uuo.mutation.ClearMenti()
	return uuo
}

// ClearMentor clears the "mentor" edge to the Mentor entity.
func (uuo *UserUpdateOne) ClearMentor() *UserUpdateOne {
	uuo.mutation.ClearMentor()
	return uuo
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (uuo *UserUpdateOne) ClearSkills() *UserUpdateOne {
	uuo.mutation.ClearSkills()
	return uuo
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (uuo *UserUpdateOne) RemoveSkillIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSkillIDs(ids...)
	return uuo
}

// RemoveSkills removes "skills" edges to Skill entities.
func (uuo *UserUpdateOne) RemoveSkills(s ...*Skill) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSkillIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Login(); ok {
		_spec.SetField(user.FieldLogin, field.TypeString, value)
	}
	if value, ok := uuo.mutation.HashedPassword(); ok {
		_spec.SetField(user.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EducationInfo(); ok {
		_spec.SetField(user.FieldEducationInfo, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.Telegram(); ok {
		_spec.SetField(user.FieldTelegram, field.TypeString, value)
	}
	if uuo.mutation.TelegramCleared() {
		_spec.ClearField(user.FieldTelegram, field.TypeString)
	}
	if value, ok := uuo.mutation.OtherContacts(); ok {
		_spec.SetField(user.FieldOtherContacts, field.TypeString, value)
	}
	if uuo.mutation.OtherContactsCleared() {
		_spec.ClearField(user.FieldOtherContacts, field.TypeString)
	}
	if value, ok := uuo.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeEnum, value)
	}
	if uuo.mutation.RealExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RealExperiencesTable,
			Columns: []string{user.RealExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.RealExperience
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRealExperiencesIDs(); len(nodes) > 0 && !uuo.mutation.RealExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RealExperiencesTable,
			Columns: []string{user.RealExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.RealExperience
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RealExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RealExperiencesTable,
			Columns: []string{user.RealExperiencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(realexperience.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.RealExperience
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MentiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentiTable,
			Columns: []string{user.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MentiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentiTable,
			Columns: []string{user.MentiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menti.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentorTable,
			Columns: []string{user.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.User
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MentorTable,
			Columns: []string{user.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentor.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.User
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SkillsTable,
			Columns: []string{user.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.Skill
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !uuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SkillsTable,
			Columns: []string{user.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.Skill
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SkillsTable,
			Columns: []string{user.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		edge.Schema = uuo.schemaConfig.Skill
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uuo.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uuo.schemaConfig)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
