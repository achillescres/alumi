// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itamconnect/ent/internal"
	"itamconnect/ent/predicate"
	"itamconnect/ent/roadmap"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// RoadMapUpdate is the builder for updating RoadMap entities.
type RoadMapUpdate struct {
	config
	hooks    []Hook
	mutation *RoadMapMutation
}

// Where appends a list predicates to the RoadMapUpdate builder.
func (rmu *RoadMapUpdate) Where(ps ...predicate.RoadMap) *RoadMapUpdate {
	rmu.mutation.Where(ps...)
	return rmu
}

// SetName sets the "name" field.
func (rmu *RoadMapUpdate) SetName(s string) *RoadMapUpdate {
	rmu.mutation.SetName(s)
	return rmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rmu *RoadMapUpdate) SetNillableName(s *string) *RoadMapUpdate {
	if s != nil {
		rmu.SetName(*s)
	}
	return rmu
}

// SetTags sets the "tags" field.
func (rmu *RoadMapUpdate) SetTags(s []string) *RoadMapUpdate {
	rmu.mutation.SetTags(s)
	return rmu
}

// AppendTags appends s to the "tags" field.
func (rmu *RoadMapUpdate) AppendTags(s []string) *RoadMapUpdate {
	rmu.mutation.AppendTags(s)
	return rmu
}

// SetText sets the "text" field.
func (rmu *RoadMapUpdate) SetText(s string) *RoadMapUpdate {
	rmu.mutation.SetText(s)
	return rmu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (rmu *RoadMapUpdate) SetNillableText(s *string) *RoadMapUpdate {
	if s != nil {
		rmu.SetText(*s)
	}
	return rmu
}

// Mutation returns the RoadMapMutation object of the builder.
func (rmu *RoadMapUpdate) Mutation() *RoadMapMutation {
	return rmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmu *RoadMapUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rmu.sqlSave, rmu.mutation, rmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmu *RoadMapUpdate) SaveX(ctx context.Context) int {
	affected, err := rmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmu *RoadMapUpdate) Exec(ctx context.Context) error {
	_, err := rmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmu *RoadMapUpdate) ExecX(ctx context.Context) {
	if err := rmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmu *RoadMapUpdate) check() error {
	if _, ok := rmu.mutation.AuthorID(); rmu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoadMap.author"`)
	}
	return nil
}

func (rmu *RoadMapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(roadmap.Table, roadmap.Columns, sqlgraph.NewFieldSpec(roadmap.FieldID, field.TypeInt))
	if ps := rmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmu.mutation.Name(); ok {
		_spec.SetField(roadmap.FieldName, field.TypeString, value)
	}
	if value, ok := rmu.mutation.Tags(); ok {
		_spec.SetField(roadmap.FieldTags, field.TypeJSON, value)
	}
	if value, ok := rmu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, roadmap.FieldTags, value)
		})
	}
	if value, ok := rmu.mutation.Text(); ok {
		_spec.SetField(roadmap.FieldText, field.TypeString, value)
	}
	_spec.Node.Schema = rmu.schemaConfig.RoadMap
	ctx = internal.NewSchemaConfigContext(ctx, rmu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, rmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roadmap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmu.mutation.done = true
	return n, nil
}

// RoadMapUpdateOne is the builder for updating a single RoadMap entity.
type RoadMapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoadMapMutation
}

// SetName sets the "name" field.
func (rmuo *RoadMapUpdateOne) SetName(s string) *RoadMapUpdateOne {
	rmuo.mutation.SetName(s)
	return rmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rmuo *RoadMapUpdateOne) SetNillableName(s *string) *RoadMapUpdateOne {
	if s != nil {
		rmuo.SetName(*s)
	}
	return rmuo
}

// SetTags sets the "tags" field.
func (rmuo *RoadMapUpdateOne) SetTags(s []string) *RoadMapUpdateOne {
	rmuo.mutation.SetTags(s)
	return rmuo
}

// AppendTags appends s to the "tags" field.
func (rmuo *RoadMapUpdateOne) AppendTags(s []string) *RoadMapUpdateOne {
	rmuo.mutation.AppendTags(s)
	return rmuo
}

// SetText sets the "text" field.
func (rmuo *RoadMapUpdateOne) SetText(s string) *RoadMapUpdateOne {
	rmuo.mutation.SetText(s)
	return rmuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (rmuo *RoadMapUpdateOne) SetNillableText(s *string) *RoadMapUpdateOne {
	if s != nil {
		rmuo.SetText(*s)
	}
	return rmuo
}

// Mutation returns the RoadMapMutation object of the builder.
func (rmuo *RoadMapUpdateOne) Mutation() *RoadMapMutation {
	return rmuo.mutation
}

// Where appends a list predicates to the RoadMapUpdate builder.
func (rmuo *RoadMapUpdateOne) Where(ps ...predicate.RoadMap) *RoadMapUpdateOne {
	rmuo.mutation.Where(ps...)
	return rmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmuo *RoadMapUpdateOne) Select(field string, fields ...string) *RoadMapUpdateOne {
	rmuo.fields = append([]string{field}, fields...)
	return rmuo
}

// Save executes the query and returns the updated RoadMap entity.
func (rmuo *RoadMapUpdateOne) Save(ctx context.Context) (*RoadMap, error) {
	return withHooks(ctx, rmuo.sqlSave, rmuo.mutation, rmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmuo *RoadMapUpdateOne) SaveX(ctx context.Context) *RoadMap {
	node, err := rmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmuo *RoadMapUpdateOne) Exec(ctx context.Context) error {
	_, err := rmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmuo *RoadMapUpdateOne) ExecX(ctx context.Context) {
	if err := rmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmuo *RoadMapUpdateOne) check() error {
	if _, ok := rmuo.mutation.AuthorID(); rmuo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoadMap.author"`)
	}
	return nil
}

func (rmuo *RoadMapUpdateOne) sqlSave(ctx context.Context) (_node *RoadMap, err error) {
	if err := rmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(roadmap.Table, roadmap.Columns, sqlgraph.NewFieldSpec(roadmap.FieldID, field.TypeInt))
	id, ok := rmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoadMap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roadmap.FieldID)
		for _, f := range fields {
			if !roadmap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roadmap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmuo.mutation.Name(); ok {
		_spec.SetField(roadmap.FieldName, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.Tags(); ok {
		_spec.SetField(roadmap.FieldTags, field.TypeJSON, value)
	}
	if value, ok := rmuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, roadmap.FieldTags, value)
		})
	}
	if value, ok := rmuo.mutation.Text(); ok {
		_spec.SetField(roadmap.FieldText, field.TypeString, value)
	}
	_spec.Node.Schema = rmuo.schemaConfig.RoadMap
	ctx = internal.NewSchemaConfigContext(ctx, rmuo.schemaConfig)
	_node = &RoadMap{config: rmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roadmap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmuo.mutation.done = true
	return _node, nil
}
