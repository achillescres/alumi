// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"itamconnect/ent/migrate"

	"itamconnect/ent/match"
	"itamconnect/ent/menti"
	"itamconnect/ent/mentor"
	"itamconnect/ent/message"
	"itamconnect/ent/realexperience"
	"itamconnect/ent/roadmap"
	"itamconnect/ent/skill"
	"itamconnect/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"itamconnect/ent/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Match is the client for interacting with the Match builders.
	Match *MatchClient
	// Menti is the client for interacting with the Menti builders.
	Menti *MentiClient
	// Mentor is the client for interacting with the Mentor builders.
	Mentor *MentorClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// RealExperience is the client for interacting with the RealExperience builders.
	RealExperience *RealExperienceClient
	// RoadMap is the client for interacting with the RoadMap builders.
	RoadMap *RoadMapClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Match = NewMatchClient(c.config)
	c.Menti = NewMentiClient(c.config)
	c.Mentor = NewMentorClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.RealExperience = NewRealExperienceClient(c.config)
	c.RoadMap = NewRoadMapClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Match:          NewMatchClient(cfg),
		Menti:          NewMentiClient(cfg),
		Mentor:         NewMentorClient(cfg),
		Message:        NewMessageClient(cfg),
		RealExperience: NewRealExperienceClient(cfg),
		RoadMap:        NewRoadMapClient(cfg),
		Skill:          NewSkillClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Match:          NewMatchClient(cfg),
		Menti:          NewMentiClient(cfg),
		Mentor:         NewMentorClient(cfg),
		Message:        NewMessageClient(cfg),
		RealExperience: NewRealExperienceClient(cfg),
		RoadMap:        NewRoadMapClient(cfg),
		Skill:          NewSkillClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Match.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Match, c.Menti, c.Mentor, c.Message, c.RealExperience, c.RoadMap, c.Skill,
		c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Match, c.Menti, c.Mentor, c.Message, c.RealExperience, c.RoadMap, c.Skill,
		c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MatchMutation:
		return c.Match.mutate(ctx, m)
	case *MentiMutation:
		return c.Menti.mutate(ctx, m)
	case *MentorMutation:
		return c.Mentor.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *RealExperienceMutation:
		return c.RealExperience.mutate(ctx, m)
	case *RoadMapMutation:
		return c.RoadMap.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MatchClient is a client for the Match schema.
type MatchClient struct {
	config
}

// NewMatchClient returns a client for the Match from the given config.
func NewMatchClient(c config) *MatchClient {
	return &MatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `match.Hooks(f(g(h())))`.
func (c *MatchClient) Use(hooks ...Hook) {
	c.hooks.Match = append(c.hooks.Match, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `match.Intercept(f(g(h())))`.
func (c *MatchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Match = append(c.inters.Match, interceptors...)
}

// Create returns a builder for creating a Match entity.
func (c *MatchClient) Create() *MatchCreate {
	mutation := newMatchMutation(c.config, OpCreate)
	return &MatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Match entities.
func (c *MatchClient) CreateBulk(builders ...*MatchCreate) *MatchCreateBulk {
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MatchClient) MapCreateBulk(slice any, setFunc func(*MatchCreate, int)) *MatchCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MatchCreateBulk{err: fmt.Errorf("calling to MatchClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MatchCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Match.
func (c *MatchClient) Update() *MatchUpdate {
	mutation := newMatchMutation(c.config, OpUpdate)
	return &MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchClient) UpdateOne(m *Match) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatch(m))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchClient) UpdateOneID(id int) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatchID(id))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Match.
func (c *MatchClient) Delete() *MatchDelete {
	mutation := newMatchMutation(c.config, OpDelete)
	return &MatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchClient) DeleteOne(m *Match) *MatchDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchClient) DeleteOneID(id int) *MatchDeleteOne {
	builder := c.Delete().Where(match.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchDeleteOne{builder}
}

// Query returns a query builder for Match.
func (c *MatchClient) Query() *MatchQuery {
	return &MatchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatch},
		inters: c.Interceptors(),
	}
}

// Get returns a Match entity by its id.
func (c *MatchClient) Get(ctx context.Context, id int) (*Match, error) {
	return c.Query().Where(match.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchClient) GetX(ctx context.Context, id int) *Match {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMentor queries the mentor edge of a Match.
func (c *MatchClient) QueryMentor(m *Match) *MentorQuery {
	query := (&MentorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(mentor.Table, mentor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, match.MentorTable, match.MentorColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Mentor
		step.Edge.Schema = schemaConfig.Match
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMenti queries the menti edge of a Match.
func (c *MatchClient) QueryMenti(m *Match) *MentiQuery {
	query := (&MentiClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(menti.Table, menti.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, match.MentiTable, match.MentiColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Menti
		step.Edge.Schema = schemaConfig.Match
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a Match.
func (c *MatchClient) QueryMessages(m *Match) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, match.MessagesTable, match.MessagesColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Message
		step.Edge.Schema = schemaConfig.Message
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchClient) Hooks() []Hook {
	return c.hooks.Match
}

// Interceptors returns the client interceptors.
func (c *MatchClient) Interceptors() []Interceptor {
	return c.inters.Match
}

func (c *MatchClient) mutate(ctx context.Context, m *MatchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Match mutation op: %q", m.Op())
	}
}

// MentiClient is a client for the Menti schema.
type MentiClient struct {
	config
}

// NewMentiClient returns a client for the Menti from the given config.
func NewMentiClient(c config) *MentiClient {
	return &MentiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `menti.Hooks(f(g(h())))`.
func (c *MentiClient) Use(hooks ...Hook) {
	c.hooks.Menti = append(c.hooks.Menti, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `menti.Intercept(f(g(h())))`.
func (c *MentiClient) Intercept(interceptors ...Interceptor) {
	c.inters.Menti = append(c.inters.Menti, interceptors...)
}

// Create returns a builder for creating a Menti entity.
func (c *MentiClient) Create() *MentiCreate {
	mutation := newMentiMutation(c.config, OpCreate)
	return &MentiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Menti entities.
func (c *MentiClient) CreateBulk(builders ...*MentiCreate) *MentiCreateBulk {
	return &MentiCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MentiClient) MapCreateBulk(slice any, setFunc func(*MentiCreate, int)) *MentiCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MentiCreateBulk{err: fmt.Errorf("calling to MentiClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MentiCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MentiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Menti.
func (c *MentiClient) Update() *MentiUpdate {
	mutation := newMentiMutation(c.config, OpUpdate)
	return &MentiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MentiClient) UpdateOne(m *Menti) *MentiUpdateOne {
	mutation := newMentiMutation(c.config, OpUpdateOne, withMenti(m))
	return &MentiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MentiClient) UpdateOneID(id int) *MentiUpdateOne {
	mutation := newMentiMutation(c.config, OpUpdateOne, withMentiID(id))
	return &MentiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Menti.
func (c *MentiClient) Delete() *MentiDelete {
	mutation := newMentiMutation(c.config, OpDelete)
	return &MentiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MentiClient) DeleteOne(m *Menti) *MentiDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MentiClient) DeleteOneID(id int) *MentiDeleteOne {
	builder := c.Delete().Where(menti.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MentiDeleteOne{builder}
}

// Query returns a query builder for Menti.
func (c *MentiClient) Query() *MentiQuery {
	return &MentiQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMenti},
		inters: c.Interceptors(),
	}
}

// Get returns a Menti entity by its id.
func (c *MentiClient) Get(ctx context.Context, id int) (*Menti, error) {
	return c.Query().Where(menti.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MentiClient) GetX(ctx context.Context, id int) *Menti {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Menti.
func (c *MentiClient) QueryUser(m *Menti) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menti.Table, menti.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, menti.UserTable, menti.UserColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMentors queries the mentors edge of a Menti.
func (c *MentiClient) QueryMentors(m *Menti) *MentorQuery {
	query := (&MentorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menti.Table, menti.FieldID, id),
			sqlgraph.To(mentor.Table, mentor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, menti.MentorsTable, menti.MentorsPrimaryKey...),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Mentor
		step.Edge.Schema = schemaConfig.Match
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatches queries the matches edge of a Menti.
func (c *MentiClient) QueryMatches(m *Menti) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(menti.Table, menti.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, menti.MatchesTable, menti.MatchesColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Match
		step.Edge.Schema = schemaConfig.Match
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MentiClient) Hooks() []Hook {
	return c.hooks.Menti
}

// Interceptors returns the client interceptors.
func (c *MentiClient) Interceptors() []Interceptor {
	return c.inters.Menti
}

func (c *MentiClient) mutate(ctx context.Context, m *MentiMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MentiCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MentiUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MentiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MentiDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Menti mutation op: %q", m.Op())
	}
}

// MentorClient is a client for the Mentor schema.
type MentorClient struct {
	config
}

// NewMentorClient returns a client for the Mentor from the given config.
func NewMentorClient(c config) *MentorClient {
	return &MentorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mentor.Hooks(f(g(h())))`.
func (c *MentorClient) Use(hooks ...Hook) {
	c.hooks.Mentor = append(c.hooks.Mentor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mentor.Intercept(f(g(h())))`.
func (c *MentorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Mentor = append(c.inters.Mentor, interceptors...)
}

// Create returns a builder for creating a Mentor entity.
func (c *MentorClient) Create() *MentorCreate {
	mutation := newMentorMutation(c.config, OpCreate)
	return &MentorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mentor entities.
func (c *MentorClient) CreateBulk(builders ...*MentorCreate) *MentorCreateBulk {
	return &MentorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MentorClient) MapCreateBulk(slice any, setFunc func(*MentorCreate, int)) *MentorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MentorCreateBulk{err: fmt.Errorf("calling to MentorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MentorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MentorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mentor.
func (c *MentorClient) Update() *MentorUpdate {
	mutation := newMentorMutation(c.config, OpUpdate)
	return &MentorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MentorClient) UpdateOne(m *Mentor) *MentorUpdateOne {
	mutation := newMentorMutation(c.config, OpUpdateOne, withMentor(m))
	return &MentorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MentorClient) UpdateOneID(id int) *MentorUpdateOne {
	mutation := newMentorMutation(c.config, OpUpdateOne, withMentorID(id))
	return &MentorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mentor.
func (c *MentorClient) Delete() *MentorDelete {
	mutation := newMentorMutation(c.config, OpDelete)
	return &MentorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MentorClient) DeleteOne(m *Mentor) *MentorDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MentorClient) DeleteOneID(id int) *MentorDeleteOne {
	builder := c.Delete().Where(mentor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MentorDeleteOne{builder}
}

// Query returns a query builder for Mentor.
func (c *MentorClient) Query() *MentorQuery {
	return &MentorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMentor},
		inters: c.Interceptors(),
	}
}

// Get returns a Mentor entity by its id.
func (c *MentorClient) Get(ctx context.Context, id int) (*Mentor, error) {
	return c.Query().Where(mentor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MentorClient) GetX(ctx context.Context, id int) *Mentor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Mentor.
func (c *MentorClient) QueryUser(m *Mentor) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mentor.Table, mentor.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, mentor.UserTable, mentor.UserColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMentis queries the mentis edge of a Mentor.
func (c *MentorClient) QueryMentis(m *Mentor) *MentiQuery {
	query := (&MentiClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mentor.Table, mentor.FieldID, id),
			sqlgraph.To(menti.Table, menti.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, mentor.MentisTable, mentor.MentisPrimaryKey...),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Menti
		step.Edge.Schema = schemaConfig.Match
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatches queries the matches edge of a Mentor.
func (c *MentorClient) QueryMatches(m *Mentor) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mentor.Table, mentor.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, mentor.MatchesTable, mentor.MatchesColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Match
		step.Edge.Schema = schemaConfig.Match
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MentorClient) Hooks() []Hook {
	return c.hooks.Mentor
}

// Interceptors returns the client interceptors.
func (c *MentorClient) Interceptors() []Interceptor {
	return c.inters.Mentor
}

func (c *MentorClient) mutate(ctx context.Context, m *MentorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MentorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MentorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MentorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MentorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Mentor mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id int) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFrom queries the from edge of a Message.
func (c *MessageClient) QueryFrom(m *Message) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.FromTable, message.FromColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Message
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatch queries the match edge of a Message.
func (c *MessageClient) QueryMatch(m *Message) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.MatchTable, message.MatchColumn),
		)
		schemaConfig := m.schemaConfig
		step.To.Schema = schemaConfig.Match
		step.Edge.Schema = schemaConfig.Message
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// RealExperienceClient is a client for the RealExperience schema.
type RealExperienceClient struct {
	config
}

// NewRealExperienceClient returns a client for the RealExperience from the given config.
func NewRealExperienceClient(c config) *RealExperienceClient {
	return &RealExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `realexperience.Hooks(f(g(h())))`.
func (c *RealExperienceClient) Use(hooks ...Hook) {
	c.hooks.RealExperience = append(c.hooks.RealExperience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `realexperience.Intercept(f(g(h())))`.
func (c *RealExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.RealExperience = append(c.inters.RealExperience, interceptors...)
}

// Create returns a builder for creating a RealExperience entity.
func (c *RealExperienceClient) Create() *RealExperienceCreate {
	mutation := newRealExperienceMutation(c.config, OpCreate)
	return &RealExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RealExperience entities.
func (c *RealExperienceClient) CreateBulk(builders ...*RealExperienceCreate) *RealExperienceCreateBulk {
	return &RealExperienceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RealExperienceClient) MapCreateBulk(slice any, setFunc func(*RealExperienceCreate, int)) *RealExperienceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RealExperienceCreateBulk{err: fmt.Errorf("calling to RealExperienceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RealExperienceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RealExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RealExperience.
func (c *RealExperienceClient) Update() *RealExperienceUpdate {
	mutation := newRealExperienceMutation(c.config, OpUpdate)
	return &RealExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RealExperienceClient) UpdateOne(re *RealExperience) *RealExperienceUpdateOne {
	mutation := newRealExperienceMutation(c.config, OpUpdateOne, withRealExperience(re))
	return &RealExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RealExperienceClient) UpdateOneID(id int) *RealExperienceUpdateOne {
	mutation := newRealExperienceMutation(c.config, OpUpdateOne, withRealExperienceID(id))
	return &RealExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RealExperience.
func (c *RealExperienceClient) Delete() *RealExperienceDelete {
	mutation := newRealExperienceMutation(c.config, OpDelete)
	return &RealExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RealExperienceClient) DeleteOne(re *RealExperience) *RealExperienceDeleteOne {
	return c.DeleteOneID(re.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RealExperienceClient) DeleteOneID(id int) *RealExperienceDeleteOne {
	builder := c.Delete().Where(realexperience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RealExperienceDeleteOne{builder}
}

// Query returns a query builder for RealExperience.
func (c *RealExperienceClient) Query() *RealExperienceQuery {
	return &RealExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRealExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a RealExperience entity by its id.
func (c *RealExperienceClient) Get(ctx context.Context, id int) (*RealExperience, error) {
	return c.Query().Where(realexperience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RealExperienceClient) GetX(ctx context.Context, id int) *RealExperience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RealExperienceClient) Hooks() []Hook {
	return c.hooks.RealExperience
}

// Interceptors returns the client interceptors.
func (c *RealExperienceClient) Interceptors() []Interceptor {
	return c.inters.RealExperience
}

func (c *RealExperienceClient) mutate(ctx context.Context, m *RealExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RealExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RealExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RealExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RealExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RealExperience mutation op: %q", m.Op())
	}
}

// RoadMapClient is a client for the RoadMap schema.
type RoadMapClient struct {
	config
}

// NewRoadMapClient returns a client for the RoadMap from the given config.
func NewRoadMapClient(c config) *RoadMapClient {
	return &RoadMapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roadmap.Hooks(f(g(h())))`.
func (c *RoadMapClient) Use(hooks ...Hook) {
	c.hooks.RoadMap = append(c.hooks.RoadMap, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `roadmap.Intercept(f(g(h())))`.
func (c *RoadMapClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoadMap = append(c.inters.RoadMap, interceptors...)
}

// Create returns a builder for creating a RoadMap entity.
func (c *RoadMapClient) Create() *RoadMapCreate {
	mutation := newRoadMapMutation(c.config, OpCreate)
	return &RoadMapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoadMap entities.
func (c *RoadMapClient) CreateBulk(builders ...*RoadMapCreate) *RoadMapCreateBulk {
	return &RoadMapCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoadMapClient) MapCreateBulk(slice any, setFunc func(*RoadMapCreate, int)) *RoadMapCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoadMapCreateBulk{err: fmt.Errorf("calling to RoadMapClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoadMapCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoadMapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoadMap.
func (c *RoadMapClient) Update() *RoadMapUpdate {
	mutation := newRoadMapMutation(c.config, OpUpdate)
	return &RoadMapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoadMapClient) UpdateOne(rm *RoadMap) *RoadMapUpdateOne {
	mutation := newRoadMapMutation(c.config, OpUpdateOne, withRoadMap(rm))
	return &RoadMapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoadMapClient) UpdateOneID(id int) *RoadMapUpdateOne {
	mutation := newRoadMapMutation(c.config, OpUpdateOne, withRoadMapID(id))
	return &RoadMapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoadMap.
func (c *RoadMapClient) Delete() *RoadMapDelete {
	mutation := newRoadMapMutation(c.config, OpDelete)
	return &RoadMapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoadMapClient) DeleteOne(rm *RoadMap) *RoadMapDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoadMapClient) DeleteOneID(id int) *RoadMapDeleteOne {
	builder := c.Delete().Where(roadmap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoadMapDeleteOne{builder}
}

// Query returns a query builder for RoadMap.
func (c *RoadMapClient) Query() *RoadMapQuery {
	return &RoadMapQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoadMap},
		inters: c.Interceptors(),
	}
}

// Get returns a RoadMap entity by its id.
func (c *RoadMapClient) Get(ctx context.Context, id int) (*RoadMap, error) {
	return c.Query().Where(roadmap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoadMapClient) GetX(ctx context.Context, id int) *RoadMap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a RoadMap.
func (c *RoadMapClient) QueryAuthor(rm *RoadMap) *MentorQuery {
	query := (&MentorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roadmap.Table, roadmap.FieldID, id),
			sqlgraph.To(mentor.Table, mentor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, roadmap.AuthorTable, roadmap.AuthorColumn),
		)
		schemaConfig := rm.schemaConfig
		step.To.Schema = schemaConfig.Mentor
		step.Edge.Schema = schemaConfig.RoadMap
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoadMapClient) Hooks() []Hook {
	return c.hooks.RoadMap
}

// Interceptors returns the client interceptors.
func (c *RoadMapClient) Interceptors() []Interceptor {
	return c.inters.RoadMap
}

func (c *RoadMapClient) mutate(ctx context.Context, m *RoadMapMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoadMapCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoadMapUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoadMapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoadMapDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoadMap mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SkillClient) MapCreateBulk(slice any, setFunc func(*SkillCreate, int)) *SkillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SkillCreateBulk{err: fmt.Errorf("calling to SkillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SkillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id int) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id int) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id int) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id int) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Skill.
func (c *SkillClient) QueryUser(s *Skill) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, skill.UserTable, skill.UserColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Skill
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRealExperiences queries the real_experiences edge of a User.
func (c *UserClient) QueryRealExperiences(u *User) *RealExperienceQuery {
	query := (&RealExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(realexperience.Table, realexperience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RealExperiencesTable, user.RealExperiencesColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.RealExperience
		step.Edge.Schema = schemaConfig.RealExperience
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMenti queries the menti edge of a User.
func (c *UserClient) QueryMenti(u *User) *MentiQuery {
	query := (&MentiClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(menti.Table, menti.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.MentiTable, user.MentiColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Menti
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMentor queries the mentor edge of a User.
func (c *UserClient) QueryMentor(u *User) *MentorQuery {
	query := (&MentorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(mentor.Table, mentor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.MentorTable, user.MentorColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Mentor
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkills queries the skills edge of a User.
func (c *UserClient) QuerySkills(u *User) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SkillsTable, user.SkillsColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Skill
		step.Edge.Schema = schemaConfig.Skill
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Match, Menti, Mentor, Message, RealExperience, RoadMap, Skill, User []ent.Hook
	}
	inters struct {
		Match, Menti, Mentor, Message, RealExperience, RoadMap, Skill,
		User []ent.Interceptor
	}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}
